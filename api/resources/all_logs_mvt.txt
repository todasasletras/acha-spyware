self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info("Extractedatotalof%ddatabaseconnectionpoolrecords",len(self.results),)
self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info('Foundinstalledaccessibilityservice"%s"',result.get("service"))
self.log.info("Identifiedatotalof%daccessibilityservices",len(self.results))
self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info("Extracted%dAndroidsystemproperties",len(self.results))
self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info("Identifiedatotalof%dpackagesinApp-OpsManager",len(self.results))
self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info("Extractedatotalof%dbatterydailystats",len(self.results))
self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info("Extracted%dpackageactivities",len(self.results))
self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info("Extractedatotalof%dbatteryhistoryrecords",len(self.results))
self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info("Extractedreceiversfor%dintents",len(self.results))
self.log.error("Unabletofinddumpstatefile.""Didyouprovideavalidbugreportarchive?")

self.log.info('Foundpackage"%s"requested%dpotentiallydangerouspermissions',result["package_name"],dangerous_permissions_count,)
self.log.info("Extracteddetailson%dpackages",len(self.results))
self.log.info('Foundinstalledaccessibilityservice"%s"',result.get("service"))
self.log.info("Identifiedatotalof%daccessibilityservices",len(self.results))
self.log.critical("Nodevicefound.Makesureitisconnectedandunlocked.")
sys.exit(-1)#OtherwisewetrytousetheTCPtransport.else:
self.log.critical("Deviceisbusy,mayberun`adbkill-server`andtryagain.")
sys.exit(-1)
exceptDeviceAuthError
self.log.error("YouneedtoauthorizethiscomputerontheAndroiddevice.""Retryingin5seconds...")time.sleep(5)exceptUsbReadFailedError
self.log.error("UnabletoconnecttothedeviceoverUSB.""Trytounplug,plugthedeviceandstartagain.")sys.exit(-1)exceptOSErrorasexc:
self.log.critical("Unabletoconnecttothedevice%s:""didyouspecifythecorrectIPaddress?",self.serial,)sys.exit(-1)
self.log.info("Reconnecting...")
self._adb_disconnect()
self._adb_connect()def_adb_command(self,command:str)->str:"""Executeanadbshellcommand.
self.log.info("PleasecheckphoneandacceptAndroidbackupprompt.""Youmayneedtosetabackuppassword.\a")ifself.module_options.get("backup_password",None)
self.log.warning("Backuppasswordalreadysetfromcommandlineorenvironment""variable.Youshouldusethesamepasswordifenablingencryption!")#TODO:Base64encodingastemporaryfixtoavoidbyte-manglingover
self.log.error("ExtractingSMSviaAndroidbackupfailed.""Novalidbackupdatafound.")
None
self.log.critical("Nobackuppasswordprovided.")try:decrypted_backup_tar=parse_backup_file(backup_output,backup_password)
decrypted_backup_tarexceptInvalidBackupPassword
self.log.error("Youprovidedthewrongpassword!Pleasetryagain...")
self.log.error("Allattemptstodecryptbackupwithpasswordfailed!")
Nonedefrun(self)->None:"""Runthemainprocedure."""
self.log.info("Extractedatotalof%dhistoryitems",len(self.results))defrun(self)->None
self._adb_connect()try:
self.log.error(exc)
self._adb_disconnect()
self.log.info("Extractedrecordsonatotalof%dprocesses",len(self.results))
self.log.info("Extractedatotalof%dWhatsAppmessagescontaininglinks",len(messages))
self.results=messagesdefrun(self)->None:
self.log.error(exc)
self._adb_disconnect()
self.log.info("Extracted%dAndroidsystemproperties",len(self.results))
self.log.info("Extracted%drecordsfrombatteryhistory",len(self.results))
self.log.warning('Foundrootbinary"%s"',root_binary)defrun(self)->None:root_binaries=["su","busybox",
self.log.info("Extractedreceiversfor%dintents",len(self.results))
self.log.info("Extractedatotalof%dSMSmessages",len(self.results))def_extract_sms_adb(self)->None:"""UsetheAndroidbackupcommandtoextractSMSdatafromthenativeSMSapp.
self.log.info("ImpossibletoreadSMSfromtheAndroidBackup,""pleaseextracttheSMSandtryextractingitwith""AndroidBackupExtractor")

self.log.info("Extractedatotalof%dSMSmessages",len(self.results))defrun(self)->None
self._adb_connect()try:
self.log.info("NoSMSdatabasefound.TryingextractionofSMSdata""usingAndroidbackupfeature.")
self._extract_sms_adb()
self.log.info("Extractedatotalof%drecordsfromapp-opsmanager",len(self.results))
self.log.warning('FoundanSUIDfileinanon-standarddirectory"%s".',result["path"],)ifself.indicatorsandself.indicators.check_file_path(result["path"])
self.log.warning('Foundaknownsuspicousfileatpath:"%s"',result["path"])
self.detected.append(result)defbackup_file(self,file_path:str)->None:
self.log.info("Downloadedfile%stolocalcopyat%s",file_path,local_file_path)deffind_files(self,folder:str)->None:assertisinstance(self.results,list)
self.log.info("Skippinginvalidfileinfo-%s",file_line.rstrip())continue[unix_timestamp,mode,size,owner,group,full_path]=file_infomod_time=convert_unix_to_iso(unix_timestamp)
self.results.append(
self.log.info("Foundfileintmpfolderatpath%s",entry.get("path"))
self.backup_file(entry.get("path"))formedia_folderinANDROID_MEDIA_FOLDERS
self.find_files(media_folder)
self.log.info("Found%sfilesinprimaryAndroidtmpandmediafolders",len(self.results))ifself.module_options.get("fast_mode",None)
self.log.info("The`fast_mode`optionwasenabled:skippingfullfilelisting")else
self.log.info("Processingfullfilelisting.Thismaytakeawhile...")
self.find_files("/")
self.log.info("Found%stotalfiles",len(self.results))
self._adb_disconnect()
self.log.warning("Foundaninstalledpackagerelatedto"'rooting/jailbreaking:"%s"',result["package_name"],)
self.detected.append(result)
self.log.warning('Foundasecuritypackagedisabled:"%s"',result["package_name"])ifresult["package_name"]inSYSTEM_UPDATE_PACKAGESandresult["disabled"]
self.log.warning('SystemOTAupdatepackage"%s"disabledonthephone',result["package_name"],)ifnotself.indicators:
self.log.info('Third-partypackage"%s"requested%d'"potentiallydangerouspermissions",result["package_name"],dangerous_permissions_count,)
self.log.info('Foundnon-systempackagewithname"%s"installedby"%s"on%s',result["package_name"],result["installer"],result["timestamp"],)
self.log.info("Extractedattotalof%dinstalledpackagenames",len(self.results))
self._adb_disconnect()
self.log.info("Fulldumpsysoutputstoredat%s",output_path)
self._adb_disconnect()
self.log.info("SELinuxisbeingregularlyenforced")else
self.log.warning('SELinuxstatusis"%s"!',status)
self.log.info("Extracted%dpackageactivities",len(self.results))
self.log.info("Currentlogcatlogsstoredat%s",logcat_path)
logcat_last_path=os.path.join(self.results_path,"logcat_last.txt")withopen(logcat_last_path,"w",encoding="utf-8")ashandle:handle.write(last_output)
self.log.info("Logcatlogspriortolastrebootstoredat%s",logcat_last_path)
self._adb_disconnect()
self.log.info("Extractedatotalof%drecordsfromdatabaseinformation",len(self.results),)
self.log.info("Extracted%drecordsfrombatterydailystats",len(self.results))
self.log.info("ProcessingSMSbackupfileat%s",file)data=self._get_file_content(file)
self.results.extend(parse_sms_file(data))mms_path="apps/com.android.providers.telephony/d_f/*_mms_backup"forfileinself._get_files_by_pattern(mms_path)
self.log.info("ProcessingMMSbackupfileat%s",file)data=self._get_file_content(file)
self.results.extend(parse_sms_file(data))
self.log.info("Extractedatotalof%dSMS&MMSmessages",len(self.results))
log.info("Yourpasswordmaybevisibleintheprocesstablebecauseit""wassuppliedonthecommandline!")ifpassword_from_env:log.info("Ignoring%senvironmentvariable,using
backup-passwordargumentinstead",MVT_ANDROID_BACKUP_PASSWORD,)
backup_passwordelifpassword_from_env:log.info("Usingbackuppasswordfrom%senvironmentvariable",MVT_ANDROID_BACKUP_PASSWORD,)
password_from_env
log.info("Usingbackuppasswordpassedfromcommandlineorenvironmentvariable.")#Thedefaultistoallowinteractivityelifmodule_options.get("interactive",True):
log.critical("Cannotdecryptbackupbecauseinteractivity""wasdisabledandthepasswordwasnot""supplied")
None
self.log.info('Foundinstalledaccessibilityservice"%s"',result.get("service"))
self.log.info("Identifiedatotalof%daccessibilityservices",len(self.results))
self.log.info("Dumpsysfilenotfound")
data=self._get_file_content(dumpsys_file[0]).decode("utf-8",errors="replace")content=self.extract_dumpsys_section(data,"DUMPOFSERVICEpackage:")
self.parse(content)
self.log.info('Foundpackage"%s"requested%dpotentiallydangerouspermissions',result["package_name"],dangerous_permissions_count,)
self.log.info("Extracteddetailson%dpackages",len(self.results))
self.log.info("Identified%drunningprocesses",len(self.results))
self.log.info("getprop.txtfilenotfound")
data=self._get_file_content(getprop_files[0]).decode("utf-8")
self.parse(data)
self.log.info("Extractedatotalof%dproperties",len(self.results))
self.log.info("Extractedatotalof%dbatterydailystats",len(self.results))
self.log.info("Extractedreceiversfor%dintents",len(self.results))
self.log.critical("Invalidbackupformat,backup.abwasnotanalysed")
password=Noneifheader["encryption"]!="none":password=prompt_or_load_android_backup_password(
self.log.critical("Nobackuppasswordprovided.")
try:tardata=parse_backup_file(data,password=password)exceptInvalidBackupPassword
self.log.critical("Invalidbackuppassword")
exceptAndroidBackupParsingError
self.log.critical("Impossibletoparsethisbackupfile,pleaseuse""AndroidBackupExtractorinstead")

self.log.info("ImpossibletoreadSMSfromtheAndroidBackup,""pleaseextracttheSMSandtryextractingitwith""AndroidBackupExtractor")

self.log.info("Nobackupdatafound")
self.parse_backup(self._get_file_content(files[0]))
self.log.info("Identified%dSMSinbackupdata",len(self.results))
self.log.info("Identified%dsettings",sum([len(val)forvalinself.results.values()]))
self.log.info("Identified%dapplicationsinAppOpsManager",len(self.results))
self.log.info("Extracted%dpackageactivities",len(self.results))
self.log.info("Identified%dDBInfoentries",len(self.results))
self.log.info("Extractedatotalof%dbatterydailystats",len(self.results))
self.log.warning("Foundaninstalledpackagerelatedto"'rooting/jailbreaking:"%s"',result["package_name"],)
self.detected.append(result)
self.log.info("%s:%s",entry["name"],entry["value"])ifentry["name"]=="ro.build.version.security_patch":warn_android_patch_level(entry["value"],self.log)ifnotself.indicators:
self.log.info('FoundareceivertointerceptoutgoingSMSmessages:"%s"',receiver["receiver"],)elifintent==INTENT_SMS_RECEIVED
self.log.info('FoundareceivertointerceptincomingSMSmessages:"%s"',receiver["receiver"],)elifintent==INTENT_DATA_SMS_RECEIVED
self.log.info('FoundareceivertointerceptincomingdataSMSmessage:"%s"',receiver["receiver"],)elifintent==INTENT_PHONE_STATE
self.log.info("Foundareceivermonitoring"'telephonystate/incomingcalls:"%s"',receiver["receiver"],)elifintent==INTENT_NEW_OUTGOING_CALL
self.log.info('Foundareceivermonitoringoutgoingcalls:"%s"',receiver["receiver"],)ifnotself.indicators:
self.log.warning('Foundsuspicious"%s"setting"%s=%s"(%s)',namespace,key,value,danger["description"],
self.log.info("Package%swithREQUEST_INSTALL_PACKAGES""permission",result["package_name"],)defparse(self,output:str)->None:
log.warning("Thisphonehasnotreceivedsecurityupdates""formorethansixmonths(lastupdate:%s)",patch_level,)
True
log.info("Downloading%s...",remote_path)file_name=""if"==/"inremote_path:file_name="_"+remote_path.split("==/")[1].replace(".apk","")
log.error("Unabletopullpackagefilefrom%s:insufficientprivileges,""itmightbeasystemapp",remote_path,)
self._adb_reconnect()
log.exception("Failedtopullpackagefilefrom%s:%s",remote_path,exc)
self._adb_reconnect()
Nonereturnlocal_path
self.log.info("Retrievinglistofinstalledpackages...")m=Packages()m.log=self.logm.serial=self.serialm.run()
log.info("StartingextractionofinstalledAPKsatfolder%s",self.results_path)#Iftheuserprovidedtheflag
log.info("Selectedall%davailablepackages",len(self.packages))packages_selection=self.packageselse:#Otherwiseweloopthroughthepackagesandgetonlythosethat#arenotmarkedassystem.forpackageinself.packages:
log.info('Selectedonly%dpackageswhicharenotmarkedas"system"',len(packages_selection),)iflen(packages_selection)==0:log.info("Nopackageswereselectedfordownload")
log.info("Downloadingpackagesfromdevice.Thismighttakesometime...")
self.results_path_apks=os.path.join(self.results_path,"apks")ifnotos.path.exists(self.results_path_apks):os.makedirs(self.results_path_apks,exist_ok=True)
log.info("[%d/%d]Package:%s",i,len(packages_selection),package["package_name"],)
log.info("Downloadofselectedpackagescompleted")defsave_json(self)->None:json_path=os.path.join(self.results_path,"apks.json")withopen(json_path,"w",encoding="utf-8")ashandle:json.dump(self.packages,handle,indent=4)
log.critical("Invalidbackupformat,fileshouldbein.abformat")sys.exit(1)password=Noneifheader["encryption"]!="none":password=prompt_or_load_android_backup_password(
log.critical("Nobackuppasswordprovided.")sys.exit(1)try:tardata=parse_backup_file(data,password=password)exceptInvalidBackupPassword:log.critical("Invalidbackuppassword")sys.exit(1)exceptAndroidBackupParsingErrorasexc:log.critical("Impossibletoparsethisbackupfile:%s",exc)
log.critical("PleaseuseAndroidBackupExtractor(ABE)instead")sys.exit(1)dbytes=io.BytesIO(tardata)
self.backup_archive=tarfile.open(fileobj=dbytes)formemberinself.backup_archive:
log.critical("Invalidbackuppath,pathshouldbeafolderoran""AndroidBackup(.ab)file")sys.exit(1)
log.critical("Youneedtospecifyanoutputfolderwith
log.info("CheckingAndroiddeviceoverdebugbridge")cmd.run()ifcmd.detected_count>0:log.warning("TheanalysisoftheAndroiddeviceproduced%ddetections!",cmd.detected_count,)
log.info("CheckingAndroidbugreportatpath:%s",bugreport_path)cmd.run()ifcmd.detected_count>0:log.warning("TheanalysisoftheAndroidbugreportproduced%ddetections!",cmd.detected_count,)
log.info("CheckingAndroidbackupatpath:%s",backup_path)cmd.run()ifcmd.detected_count>0:log.warning("TheanalysisoftheAndroidbackupproduced%ddetections!",cmd.detected_count,)
log.info("CheckingAndroidQFacquisitionatpath:%s",androidqf_path)cmd.run()ifcmd.detected_count>0:log.warning("TheanalysisoftheAndroidQFacquisitionproduced%ddetections!",cmd.detected_count,)
