./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-        data = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-        if not data:
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-        section = self.extract_dumpsys_section(
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-            data.decode("utf-8", errors="ignore"), "DUMP OF SERVICE dbinfo:"
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-        self.parse(section)
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-            "Extracted a total of %d database connection pool records",
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-            len(self.results),
./submodules/mvt/src/mvt/android/modules/bugreport/dbinfo.py-        )
--
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-        full_dumpsys = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-        if not full_dumpsys:
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-
--
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-            "DUMP OF SERVICE accessibility:",
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-        self.parse(content)
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-        for result in self.results:
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-                'Found installed accessibility service "%s"', result.get("service")
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-            "Identified a total of %d accessibility services", len(self.results)
./submodules/mvt/src/mvt/android/modules/bugreport/accessibility.py-        )
--
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-        self.results = [] if not results else results
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-        content = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-        if not content:
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-
--
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-                break
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-            lines.append(line)
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py-        self.parse("\n".join(lines))
./submodules/mvt/src/mvt/android/modules/bugreport/getprop.py:        self.log.info("Extracted %d Android system properties", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-        data = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-        if not data:
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-        data = data.decode("utf-8", errors="replace")
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-        content = self.extract_dumpsys_section(data, "DUMP OF SERVICE platform_compat:")
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-        self.parse(content)
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py-
./submodules/mvt/src/mvt/android/modules/bugreport/platform_compat.py:        self.log.info("Found %d uninstalled apps", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-        content = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-        if not content:
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-        section = self.extract_dumpsys_section(
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-            content.decode("utf-8", errors="replace"), "DUMP OF SERVICE appops:"
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-        self.parse(section)
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-            "Identified a total of %d packages in App-Ops Manager", len(self.results)
./submodules/mvt/src/mvt/android/modules/bugreport/appops.py-        )
--
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-        content = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-        if not content:
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-        dumpsys_section = self.extract_dumpsys_section(
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-            content.decode("utf-8", errors="replace"), "DUMP OF SERVICE batterystats:"
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-        self.parse(dumpsys_section)
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py-
./submodules/mvt/src/mvt/android/modules/bugreport/battery_daily.py:        self.log.info("Extracted a total of %d battery daily stats", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-        self.results = results if results else []
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-        content = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-        if not content:
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-
--
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-        # Parse
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-        self.parse(section)
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py-
./submodules/mvt/src/mvt/android/modules/bugreport/activities.py:        self.log.info("Extracted %d package activities", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-        content = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-        if not content:
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-        dumpsys_section = self.extract_dumpsys_section(
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-            content.decode("utf-8", errors="replace"), "DUMP OF SERVICE batterystats:"
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-        self.parse(dumpsys_section)
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-            "Extracted a total of %d battery history records", len(self.results)
./submodules/mvt/src/mvt/android/modules/bugreport/battery_history.py-        )
--
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-        self.results = results if results else {}
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-        content = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-        if not content:
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-        dumpsys_section = self.extract_dumpsys_section(
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-            content.decode("utf-8", errors="replace"), "DUMP OF SERVICE package:"
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py-        self.parse(dumpsys_section)
./submodules/mvt/src/mvt/android/modules/bugreport/receivers.py:        self.log.info("Extracted receivers for %d intents", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-        data = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-        if not data:
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-
--
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-            for perm in result["permissions"]:
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-                if perm["name"] in DANGEROUS_PERMISSIONS:
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-                    dangerous_permissions_count += 1
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-            if dangerous_permissions_count >= DANGEROUS_PERMISSIONS_THRESHOLD:
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py:                self.log.info(
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-                    'Found package "%s" requested %d potentially dangerous permissions',
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-                    result["package_name"],
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-                    dangerous_permissions_count,
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-                )
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py-
./submodules/mvt/src/mvt/android/modules/bugreport/packages.py:        self.log.info("Extracted details on %d packages", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-        full_dumpsys = self._get_dumpstate_file()
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-        if not full_dumpsys:
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-                "Unable to find dumpstate file. "
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-                "Did you provide a valid bug report archive?"
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-            )
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-            return
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-
--
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-            b"DUMP OF SERVICE adb:",
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-            binary=True,
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-        )
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-        self.parse(content)
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-        if self.results:
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-                "Identified a total of %d trusted ADB keys",
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-                len(self.results[0].get("user_keys", [])),
./submodules/mvt/src/mvt/android/modules/bugreport/adb_state.py-            )
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-        for result in self.results:
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-                'Found installed accessibility service "%s"', result.get("service")
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-            )
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-            "Identified a total of %d accessibility services", len(self.results)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_accessibility.py-        )
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-        # a HOST:PORT definition, we use the USB transport.
./submodules/mvt/src/mvt/android/modules/adb/base.py-        if not self.serial or ":" not in self.serial:
./submodules/mvt/src/mvt/android/modules/adb/base.py-            try:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.device = AdbDeviceUsb(serial=self.serial)
./submodules/mvt/src/mvt/android/modules/adb/base.py-            except UsbDeviceNotFoundError:
./submodules/mvt/src/mvt/android/modules/adb/base.py:                self.log.critical(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "No device found. Make sure it is connected and unlocked."
./submodules/mvt/src/mvt/android/modules/adb/base.py-                )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                sys.exit(-1)
./submodules/mvt/src/mvt/android/modules/adb/base.py-        # Otherwise we try to use the TCP transport.
./submodules/mvt/src/mvt/android/modules/adb/base.py-        else:
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        while True:
./submodules/mvt/src/mvt/android/modules/adb/base.py-            try:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.device.connect(rsa_keys=[signer], auth_timeout_s=5)
./submodules/mvt/src/mvt/android/modules/adb/base.py-            except (USBErrorBusy, USBErrorAccess):
./submodules/mvt/src/mvt/android/modules/adb/base.py:                self.log.critical(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "Device is busy, maybe run `adb kill-server` and try again."
./submodules/mvt/src/mvt/android/modules/adb/base.py-                )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                sys.exit(-1)
./submodules/mvt/src/mvt/android/modules/adb/base.py-            except DeviceAuthError:
./submodules/mvt/src/mvt/android/modules/adb/base.py:                self.log.error(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "You need to authorize this computer on the Android device. "
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "Retrying in 5 seconds..."
./submodules/mvt/src/mvt/android/modules/adb/base.py-                )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                time.sleep(5)
./submodules/mvt/src/mvt/android/modules/adb/base.py-            except UsbReadFailedError:
./submodules/mvt/src/mvt/android/modules/adb/base.py:                self.log.error(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "Unable to connect to the device over USB. "
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "Try to unplug, plug the device and start again."
./submodules/mvt/src/mvt/android/modules/adb/base.py-                )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                sys.exit(-1)
./submodules/mvt/src/mvt/android/modules/adb/base.py-            except OSError as exc:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                if exc.errno == 113 and self.serial:
./submodules/mvt/src/mvt/android/modules/adb/base.py:                    self.log.critical(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                        "Unable to connect to the device %s: "
./submodules/mvt/src/mvt/android/modules/adb/base.py-                        "did you specify the correct IP address?",
./submodules/mvt/src/mvt/android/modules/adb/base.py-                        self.serial,
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    sys.exit(-1)
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-        """Close adb connection to the device."""
./submodules/mvt/src/mvt/android/modules/adb/base.py-        self.device.close()
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-    def _adb_reconnect(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/base.py-        """Reconnect to device using adb."""
./submodules/mvt/src/mvt/android/modules/adb/base.py:        self.log.info("Reconnecting ...")
./submodules/mvt/src/mvt/android/modules/adb/base.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/base.py-        self._adb_connect()
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-    def _adb_command(self, command: str, decode: bool = True) -> str:
./submodules/mvt/src/mvt/android/modules/adb/base.py-        """Execute an adb shell command.
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-        tmp.close()
./submodules/mvt/src/mvt/android/modules/adb/base.py-        # Delete the copy on /sdcard/.
./submodules/mvt/src/mvt/android/modules/adb/base.py-        self._adb_command(f"rm -f {new_remote_path}")
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-    def _generate_backup(self, package_name: str) -> bytes:
./submodules/mvt/src/mvt/android/modules/adb/base.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/base.py-            "Please check phone and accept Android backup prompt. "
./submodules/mvt/src/mvt/android/modules/adb/base.py-            "You may need to set a backup password. \a"
./submodules/mvt/src/mvt/android/modules/adb/base.py-        )
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        if self.module_options.get("backup_password", None):
./submodules/mvt/src/mvt/android/modules/adb/base.py:            self.log.warning(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                "Backup password already set from command line or environment "
./submodules/mvt/src/mvt/android/modules/adb/base.py-                "variable. You should use the same password if enabling encryption!"
./submodules/mvt/src/mvt/android/modules/adb/base.py-            )
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        # TODO: Base64 encoding as temporary fix to avoid byte-mangling over
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-        backup_output_b64 = self._adb_command(cmd)
./submodules/mvt/src/mvt/android/modules/adb/base.py-        backup_output = base64.b64decode(backup_output_b64)
./submodules/mvt/src/mvt/android/modules/adb/base.py-        header = parse_ab_header(backup_output)
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        if not header["backup"]:
./submodules/mvt/src/mvt/android/modules/adb/base.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                "Extracting SMS via Android backup failed. No valid backup data found."
./submodules/mvt/src/mvt/android/modules/adb/base.py-            )
./submodules/mvt/src/mvt/android/modules/adb/base.py-            return None
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        if header["encryption"] == "none":
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-            backup_password = prompt_or_load_android_backup_password(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.log, self.module_options
./submodules/mvt/src/mvt/android/modules/adb/base.py-            )
./submodules/mvt/src/mvt/android/modules/adb/base.py-            if not backup_password:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                # Fail as no backup password loaded for this encrypted backup
./submodules/mvt/src/mvt/android/modules/adb/base.py:                self.log.critical("No backup password provided.")
./submodules/mvt/src/mvt/android/modules/adb/base.py-            try:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                decrypted_backup_tar = parse_backup_file(backup_output, backup_password)
./submodules/mvt/src/mvt/android/modules/adb/base.py-                return decrypted_backup_tar
./submodules/mvt/src/mvt/android/modules/adb/base.py-            except InvalidBackupPassword:
./submodules/mvt/src/mvt/android/modules/adb/base.py:                self.log.error("You provided the wrong password! Please try again...")
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py:        self.log.error("All attempts to decrypt backup with password failed!")
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        return None
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/base.py-        """Run the main procedure."""
--
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-            )
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-        cur.close()
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-        conn.close()
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py:        self.log.info("Extracted a total of %d history items", len(self.results))
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-        self._adb_connect()
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-            self._adb_process_file(
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-                os.path.join("/", CHROME_HISTORY_PATH), self._parse_db
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-            )
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-        except Exception as exc:
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py:            self.log.error(exc)
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/processes.py-
./submodules/mvt/src/mvt/android/modules/adb/processes.py-        output = self._adb_command("ps -A")
./submodules/mvt/src/mvt/android/modules/adb/processes.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/processes.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/processes.py-
./submodules/mvt/src/mvt/android/modules/adb/processes.py:        self.log.info("Extracted records on a total of %d processes", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-                messages.append(message)
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        cur.close()
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        conn.close()
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-            "Extracted a total of %d WhatsApp messages containing links", len(messages)
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        )
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        self.results = messages
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        self._adb_connect()
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-            self._adb_process_file(os.path.join("/", WHATSAPP_PATH), self._parse_db)
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        except Exception as exc:
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py:            self.log.error(exc)
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/getprop.py-        self._adb_connect()
./submodules/mvt/src/mvt/android/modules/adb/getprop.py-        output = self._adb_command("getprop")
./submodules/mvt/src/mvt/android/modules/adb/getprop.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/getprop.py-
./submodules/mvt/src/mvt/android/modules/adb/getprop.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/getprop.py:        self.log.info("Extracted %d Android system properties", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py-        output = self._adb_command("dumpsys adb", decode=False)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py-        if self.results:
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py-                "Identified a total of %d trusted ADB keys",
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py-                len(self.results[0].get("user_keys", [])),
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_adbstate.py-            )
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_history.py-        output = self._adb_command("dumpsys batterystats --history")
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_history.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_history.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_history.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_history.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_history.py:        self.log.info("Extracted %d records from battery history", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-        )
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-    def check_indicators(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-        for root_binary in self.results:
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-            self.detected.append(root_binary)
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py:            self.log.warning('Found root binary "%s"', root_binary)
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-        root_binaries = [
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-            "su",
./submodules/mvt/src/mvt/android/modules/adb/root_binaries.py-            "busybox",
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_receivers.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_receivers.py-        output = self._adb_command("dumpsys package")
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_receivers.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_receivers.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_receivers.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_receivers.py:        self.log.info("Extracted receivers for %d intents", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            self.results.append(message)
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        cur.close()
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        conn.close()
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py:        self.log.info("Extracted a total of %d SMS messages", len(self.results))
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py-    def _extract_sms_adb(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        """Use the Android backup command to extract SMS data from the native
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        SMS app.
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
--
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            return
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            self.results = parse_tar_for_sms(backup_tar)
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        except AndroidBackupParsingError:
./submodules/mvt/src/mvt/android/modules/adb/sms.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/sms.py-                "Impossible to read SMS from the Android Backup, "
./submodules/mvt/src/mvt/android/modules/adb/sms.py-                "please extract the SMS and try extracting it with "
./submodules/mvt/src/mvt/android/modules/adb/sms.py-                "Android Backup Extractor"
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            )
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            return
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py:        self.log.info("Extracted a total of %d SMS messages", len(self.results))
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        self._adb_connect()
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        try:
--
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            return
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        except InsufficientPrivileges:
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            pass
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            "No SMS database found. Trying extraction of SMS data "
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            "using Android backup feature."
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        )
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        self._extract_sms_adb()
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_appops.py-        output = self._adb_command("dumpsys appops")
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_appops.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_appops.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_appops.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_appops.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_appops.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_appops.py-            "Extracted a total of %d records from app-ops manager", len(self.results)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_appops.py-        )
--
./submodules/mvt/src/mvt/android/modules/adb/files.py-        return None
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-    def check_indicators(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/files.py-        for result in self.results:
./submodules/mvt/src/mvt/android/modules/adb/files.py-            if result.get("is_suid"):
./submodules/mvt/src/mvt/android/modules/adb/files.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/adb/files.py-                    'Found an SUID file in a non-standard directory "%s".',
./submodules/mvt/src/mvt/android/modules/adb/files.py-                    result["path"],
./submodules/mvt/src/mvt/android/modules/adb/files.py-                )
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-            if self.indicators and self.indicators.check_file_path(result["path"]):
./submodules/mvt/src/mvt/android/modules/adb/files.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/adb/files.py-                    'Found a known suspicous file at path: "%s"', result["path"]
./submodules/mvt/src/mvt/android/modules/adb/files.py-                )
./submodules/mvt/src/mvt/android/modules/adb/files.py-                self.detected.append(result)
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-    def backup_file(self, file_path: str) -> None:
--
./submodules/mvt/src/mvt/android/modules/adb/files.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/files.py-            self._adb_download(remote_path=file_path, local_path=local_file_path)
./submodules/mvt/src/mvt/android/modules/adb/files.py-        except Exception:
./submodules/mvt/src/mvt/android/modules/adb/files.py-            pass
./submodules/mvt/src/mvt/android/modules/adb/files.py-        else:
./submodules/mvt/src/mvt/android/modules/adb/files.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/files.py-                "Downloaded file %s to local copy at %s", file_path, local_file_path
./submodules/mvt/src/mvt/android/modules/adb/files.py-            )
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-    def find_files(self, folder: str) -> None:
./submodules/mvt/src/mvt/android/modules/adb/files.py-        assert isinstance(self.results, list)
--
./submodules/mvt/src/mvt/android/modules/adb/files.py-            output = self._adb_command(cmd)
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-            for file_line in output.splitlines():
./submodules/mvt/src/mvt/android/modules/adb/files.py-                file_info = file_line.rstrip().split(" ", 5)
./submodules/mvt/src/mvt/android/modules/adb/files.py-                if len(file_line) < 6:
./submodules/mvt/src/mvt/android/modules/adb/files.py:                    self.log.info("Skipping invalid file info - %s", file_line.rstrip())
./submodules/mvt/src/mvt/android/modules/adb/files.py-                    continue
./submodules/mvt/src/mvt/android/modules/adb/files.py-                [unix_timestamp, mode, size, owner, group, full_path] = file_info
./submodules/mvt/src/mvt/android/modules/adb/files.py-                mod_time = convert_unix_to_iso(unix_timestamp)
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-                self.results.append(
--
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-        for tmp_folder in ANDROID_TMP_FOLDERS:
./submodules/mvt/src/mvt/android/modules/adb/files.py-            self.find_files(tmp_folder)
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-        for entry in self.results:
./submodules/mvt/src/mvt/android/modules/adb/files.py:            self.log.info("Found file in tmp folder at path %s", entry.get("path"))
./submodules/mvt/src/mvt/android/modules/adb/files.py-            self.backup_file(entry.get("path"))
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-        for media_folder in ANDROID_MEDIA_FOLDERS:
./submodules/mvt/src/mvt/android/modules/adb/files.py-            self.find_files(media_folder)
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/files.py-            "Found %s files in primary Android tmp and media folders", len(self.results)
./submodules/mvt/src/mvt/android/modules/adb/files.py-        )
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-        if self.module_options.get("fast_mode", None):
./submodules/mvt/src/mvt/android/modules/adb/files.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/files.py-                "The `fast_mode` option was enabled: skipping full file listing"
./submodules/mvt/src/mvt/android/modules/adb/files.py-            )
./submodules/mvt/src/mvt/android/modules/adb/files.py-        else:
./submodules/mvt/src/mvt/android/modules/adb/files.py:            self.log.info("Processing full file listing. This may take a while...")
./submodules/mvt/src/mvt/android/modules/adb/files.py-            self.find_files("/")
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py:            self.log.info("Found %s total files", len(self.results))
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/packages.py-        return records
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-    def check_indicators(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-        for result in self.results:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            if result["package_name"] in ROOT_PACKAGES:
./submodules/mvt/src/mvt/android/modules/adb/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    'Found an installed package related to rooting/jailbreaking: "%s"',
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    result["package_name"],
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                )
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                self.detected.append(result)
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                continue
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            if result["package_name"] in SECURITY_PACKAGES and result["disabled"]:
./submodules/mvt/src/mvt/android/modules/adb/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    'Found a security package disabled: "%s"', result["package_name"]
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                )
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            if result["package_name"] in SYSTEM_UPDATE_PACKAGES and result["disabled"]:
./submodules/mvt/src/mvt/android/modules/adb/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    'System OTA update package "%s" disabled on the phone',
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    result["package_name"],
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                )
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            if not self.indicators:
--
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            for perm in result["requested_permissions"]:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                if perm in DANGEROUS_PERMISSIONS:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    dangerous_permissions_count += 1
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            if dangerous_permissions_count >= DANGEROUS_PERMISSIONS_THRESHOLD:
./submodules/mvt/src/mvt/android/modules/adb/packages.py:                self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    'Third-party package "%s" requested %d '
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    "potentially dangerous permissions",
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    result["package_name"],
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    dangerous_permissions_count,
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                )
--
./submodules/mvt/src/mvt/android/modules/adb/packages.py-        for result in self.results:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            if result["system"]:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                continue
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            packages_to_lookup.append(result)
./submodules/mvt/src/mvt/android/modules/adb/packages.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                'Found non-system package with name "%s" installed by "%s" on %s',
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                result["package_name"],
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                result["installer"],
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                result["timestamp"],
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            )
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-        if not self.module_options.get("fast_mode", None):
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            self.check_virustotal(packages_to_lookup)
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            "Extracted at total of %d installed package names", len(self.results)
./submodules/mvt/src/mvt/android/modules/adb/packages.py-        )
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_full.py-        if self.results_path:
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_full.py-            output_path = os.path.join(self.results_path, "dumpsys.txt")
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_full.py-            with open(output_path, "w", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_full.py-                handle.write(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_full.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_full.py:            self.log.info("Full dumpsys output stored at %s", output_path)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_full.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_full.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/selinux_status.py-
./submodules/mvt/src/mvt/android/modules/adb/selinux_status.py-        status = output.lower().strip()
./submodules/mvt/src/mvt/android/modules/adb/selinux_status.py-        self.results["status"] = status
./submodules/mvt/src/mvt/android/modules/adb/selinux_status.py-
./submodules/mvt/src/mvt/android/modules/adb/selinux_status.py-        if status == "enforcing":
./submodules/mvt/src/mvt/android/modules/adb/selinux_status.py:            self.log.info("SELinux is being regularly enforced")
./submodules/mvt/src/mvt/android/modules/adb/selinux_status.py-        else:
./submodules/mvt/src/mvt/android/modules/adb/selinux_status.py:            self.log.warning('SELinux status is "%s"!', status)
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_activities.py-        self._adb_connect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_activities.py-        output = self._adb_command("dumpsys package")
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_activities.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_activities.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_activities.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_activities.py:        self.log.info("Extracted %d package activities", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-        if self.results_path:
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-            logcat_path = os.path.join(self.results_path, "logcat.txt")
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-            with open(logcat_path, "w", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-                handle.write(output)
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-
./submodules/mvt/src/mvt/android/modules/adb/logcat.py:            self.log.info("Current logcat logs stored at %s", logcat_path)
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-            logcat_last_path = os.path.join(self.results_path, "logcat_last.txt")
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-            with open(logcat_last_path, "w", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-                handle.write(last_output)
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-
./submodules/mvt/src/mvt/android/modules/adb/logcat.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-                "Logcat logs prior to last reboot stored at %s", logcat_last_path
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-            )
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-
./submodules/mvt/src/mvt/android/modules/adb/logcat.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py-        output = self._adb_command("dumpsys dbinfo")
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py-            "Extracted a total of %d records from database information",
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py-            len(self.results),
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_dbinfo.py-        )
--
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_daily.py-        output = self._adb_command("dumpsys batterystats --daily")
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_daily.py-        self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_daily.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_daily.py-        self.parse(output)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_daily.py-
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_daily.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_daily.py-            "Extracted %d records from battery daily stats", len(self.results)
./submodules/mvt/src/mvt/android/modules/adb/dumpsys_battery_daily.py-        )
--
./submodules/mvt/src/mvt/android/modules/backup/sms.py-                continue
./submodules/mvt/src/mvt/android/modules/backup/sms.py-
./submodules/mvt/src/mvt/android/modules/backup/sms.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/backup/sms.py-        sms_path = "apps/com.android.providers.telephony/d_f/*_sms_backup"
./submodules/mvt/src/mvt/android/modules/backup/sms.py-        for file in self._get_files_by_pattern(sms_path):
./submodules/mvt/src/mvt/android/modules/backup/sms.py:            self.log.info("Processing SMS backup file at %s", file)
./submodules/mvt/src/mvt/android/modules/backup/sms.py-            data = self._get_file_content(file)
./submodules/mvt/src/mvt/android/modules/backup/sms.py-            self.results.extend(parse_sms_file(data))
./submodules/mvt/src/mvt/android/modules/backup/sms.py-
./submodules/mvt/src/mvt/android/modules/backup/sms.py-        mms_path = "apps/com.android.providers.telephony/d_f/*_mms_backup"
./submodules/mvt/src/mvt/android/modules/backup/sms.py-        for file in self._get_files_by_pattern(mms_path):
./submodules/mvt/src/mvt/android/modules/backup/sms.py:            self.log.info("Processing MMS backup file at %s", file)
./submodules/mvt/src/mvt/android/modules/backup/sms.py-            data = self._get_file_content(file)
./submodules/mvt/src/mvt/android/modules/backup/sms.py-            self.results.extend(parse_sms_file(data))
./submodules/mvt/src/mvt/android/modules/backup/sms.py-
./submodules/mvt/src/mvt/android/modules/backup/sms.py:        self.log.info("Extracted a total of %d SMS & MMS messages", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    Used in MVT CLI command parsers.
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    """
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    password_from_env = os.environ.get(MVT_ANDROID_BACKUP_PASSWORD, None)
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    if backup_password:
./submodules/mvt/src/mvt/android/modules/backup/helpers.py:        log.info(
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            "Your password may be visible in the process table because it "
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            "was supplied on the command line!"
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        )
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        if password_from_env:
./submodules/mvt/src/mvt/android/modules/backup/helpers.py:            log.info(
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-                "Ignoring %s environment variable, using --backup-password argument instead",
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-                MVT_ANDROID_BACKUP_PASSWORD,
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            )
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        return backup_password
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    elif password_from_env:
./submodules/mvt/src/mvt/android/modules/backup/helpers.py:        log.info(
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            "Using backup password from %s environment variable",
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            MVT_ANDROID_BACKUP_PASSWORD,
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        )
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        return password_from_env
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-
--
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    """
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    Used in modules to either prompt or load backup password to use for encryption and decryption.
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    """
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    if module_options.get("backup_password", None):
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        backup_password = module_options["backup_password"]
./submodules/mvt/src/mvt/android/modules/backup/helpers.py:        log.info(
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            "Using backup password passed from command line or environment variable."
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        )
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    # The default is to allow interactivity
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    elif module_options.get("interactive", True):
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        backup_password = Prompt.ask(prompt="Enter backup password", password=True)
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-    else:
./submodules/mvt/src/mvt/android/modules/backup/helpers.py:        log.critical(
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            "Cannot decrypt backup because interactivity"
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            " was disabled and the password was not"
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-            " supplied"
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        )
./submodules/mvt/src/mvt/android/modules/backup/helpers.py-        return None
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-        data = self._get_file_content(dumpsys_file[0]).decode("utf-8", errors="replace")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-        content = self.extract_dumpsys_section(data, "DUMP OF SERVICE accessibility:")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-        self.parse(content)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-        for result in self.results:
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-                'Found installed accessibility service "%s"', result.get("service")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-            )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-            "Identified a total of %d accessibility services", len(self.results)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_accessibility.py-        )
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-        )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-        dumpsys_file = self._get_files_by_pattern("*/dumpsys.txt")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-        if len(dumpsys_file) != 1:
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py:            self.log.info("Dumpsys file not found")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-        data = self._get_file_content(dumpsys_file[0]).decode("utf-8", errors="replace")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-        content = self.extract_dumpsys_section(data, "DUMP OF SERVICE package:")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-        self.parse(content)
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-            for perm in result["permissions"]:
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-                if perm["name"] in DANGEROUS_PERMISSIONS:
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-                    dangerous_permissions_count += 1
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-            if dangerous_permissions_count >= DANGEROUS_PERMISSIONS_THRESHOLD:
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py:                self.log.info(
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-                    'Found package "%s" requested %d potentially dangerous permissions',
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-                    result["package_name"],
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-                    dangerous_permissions_count,
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-                )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_packages.py:        self.log.info("Extracted details on %d packages", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py-            b"DUMP OF SERVICE adb:",
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py-            binary=True,
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py-        )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py-        self.parse(content)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py-        if self.results:
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py-                "Identified a total of %d trusted ADB keys",
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py-                len(self.results[0].get("user_keys", [])),
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_adb.py-            )
--
./submodules/mvt/src/mvt/android/modules/androidqf/processes.py-        ps_files = self._get_files_by_pattern("*/ps.txt")
./submodules/mvt/src/mvt/android/modules/androidqf/processes.py-        if not ps_files:
./submodules/mvt/src/mvt/android/modules/androidqf/processes.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/processes.py-
./submodules/mvt/src/mvt/android/modules/androidqf/processes.py-        self.parse(self._get_file_content(ps_files[0]).decode("utf-8"))
./submodules/mvt/src/mvt/android/modules/androidqf/processes.py:        self.log.info("Identified %d running processes", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-        self.results = []
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-        getprop_files = self._get_files_by_pattern("*/getprop.txt")
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-        if not getprop_files:
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py:            self.log.info("getprop.txt file not found")
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-        data = self._get_file_content(getprop_files[0]).decode("utf-8")
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py-        self.parse(data)
./submodules/mvt/src/mvt/android/modules/androidqf/getprop.py:        self.log.info("Extracted a total of %d properties", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_history.py-            data.decode("utf-8", errors="replace"), "DUMP OF SERVICE batterystats:"
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_history.py-        )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_history.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_history.py-        # Parse it
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_history.py-        self.parse(section)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_history.py:        self.log.info("Extracted a total of %d battery daily stats", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_receivers.py-            data.decode("utf-8", errors="replace"), "DUMP OF SERVICE package:"
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_receivers.py-        )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_receivers.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_receivers.py-        self.parse(dumpsys_section)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_receivers.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_receivers.py:        self.log.info("Extracted receivers for %d intents", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                self.detected.append(message)
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-    def parse_backup(self, data):
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        header = parse_ab_header(data)
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        if not header["backup"]:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:            self.log.critical("Invalid backup format, backup.ab was not analysed")
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        password = None
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        if header["encryption"] != "none":
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            password = prompt_or_load_android_backup_password(
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                self.log, self.module_options
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            )
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            if not password:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:                self.log.critical("No backup password provided.")
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        try:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            tardata = parse_backup_file(data, password=password)
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        except InvalidBackupPassword:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:            self.log.critical("Invalid backup password")
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        except AndroidBackupParsingError:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:            self.log.critical(
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                "Impossible to parse this backup file, please use"
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                " Android Backup Extractor instead"
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            )
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
--
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        try:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            self.results = parse_tar_for_sms(tardata)
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        except AndroidBackupParsingError:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:            self.log.info(
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                "Impossible to read SMS from the Android Backup, "
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                "please extract the SMS and try extracting it with "
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                "Android Backup Extractor"
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            )
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        files = self._get_files_by_pattern("*/backup.ab")
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        if not files:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:            self.log.info("No backup data found")
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        self.parse_backup(self._get_file_content(files[0]))
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:        self.log.info("Identified %d SMS in backup data", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                try:
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                    self.results[namespace][key] = value
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                except IndexError:
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                    continue
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py:        self.log.info(
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-            "Identified %d settings", sum([len(val) for val in self.results.values()])
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-        )
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_appops.py-            data.decode("utf-8", errors="replace"), "DUMP OF SERVICE appops:"
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_appops.py-        )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_appops.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_appops.py-        # Parse it
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_appops.py-        self.parse(section)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_appops.py:        self.log.info("Identified %d applications in AppOps Manager", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                if result["path"].startswith(suspicious_path):
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                    file_type = ""
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                    if self.file_is_executable(result["mode"]):
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                        file_type = "executable "
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-
./submodules/mvt/src/mvt/android/modules/androidqf/files.py:                    self.log.warning(
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                        'Found %sfile at suspicious path "%s".',
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                        file_type,
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                        result["path"],
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                    )
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                    self.detected.append(result)
--
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                self.results.append(file_data)
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-            break  # Only process the first matching file
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-
./submodules/mvt/src/mvt/android/modules/androidqf/files.py:        self.log.info("Found a total of %d files", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-        )
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-    def check_indicators(self) -> None:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-        for result in self.results:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            if result["name"] in ROOT_PACKAGES:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    'Found an installed package related to rooting/jailbreaking: "%s"',
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    result["name"],
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                )
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                self.detected.append(result)
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                continue
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            # Detections for apps installed via unusual methods
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            if result["installer"] in THIRD_PARTY_STORE_INSTALLERS:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    'Found a package installed via a third party store (installer="%s"): "%s"',
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    result["installer"],
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    result["name"],
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                )
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            elif result["installer"] in BROWSER_INSTALLERS:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    'Found a package installed via a browser (installer="%s"): "%s"',
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    result["installer"],
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    result["name"],
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                )
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                self.detected.append(result)
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            elif result["installer"] == "null" and result["system"] is False:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    'Found a non-system package installed via adb or another method: "%s"',
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    result["name"],
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                )
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                self.detected.append(result)
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            elif result["installer"] in PLAY_STORE_INSTALLERS:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                pass
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            # Check for disabled security or software update packages
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            package_disabled = result.get("disabled", None)
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            if result["name"] in SECURITY_PACKAGES and package_disabled:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    'Security package "%s" disabled on the phone', result["name"]
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                )
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            if result["name"] in SYSTEM_UPDATE_PACKAGES and package_disabled:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    'System OTA update package "%s" disabled on the phone',
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                    result["name"],
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                )
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            if not self.indicators:
--
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-        self.detected = list(dedupe_detected_dict.values())
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-        packages = self._get_files_by_pattern("*/packages.json")
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-        if not packages:
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py:            self.log.error(
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-                "packages.json file not found in this androidqf bundle. Possibly malformed?"
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            )
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py-        self.results = json.loads(self._get_file_content(packages[0]))
./submodules/mvt/src/mvt/android/modules/androidqf/packages.py:        self.log.info("Found %d packages in packages.json", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_activities.py-        data = self._get_file_content(dumpsys_file[0]).decode("utf-8", errors="replace")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_activities.py-        content = self.extract_dumpsys_section(data, "DUMP OF SERVICE package:")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_activities.py-        # Parse it
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_activities.py-        self.parse(content)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_activities.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_activities.py:        self.log.info("Extracted %d package activities", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_platform_compat.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_platform_compat.py-        data = self._get_file_content(dumpsys_file[0]).decode("utf-8", errors="replace")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_platform_compat.py-        content = self.extract_dumpsys_section(data, "DUMP OF SERVICE platform_compat:")
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_platform_compat.py-        self.parse(content)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_platform_compat.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_platform_compat.py:        self.log.info("Found %d uninstalled apps", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_dbinfo.py-            data.decode("utf-8", errors="replace"), "DUMP OF SERVICE dbinfo:"
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_dbinfo.py-        )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_dbinfo.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_dbinfo.py-        # Parse it
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_dbinfo.py-        self.parse(section)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_dbinfo.py:        self.log.info("Identified %d DB Info entries", len(self.results))
--
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_daily.py-            data.decode("utf-8", errors="replace"), "DUMP OF SERVICE batterystats:"
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_daily.py-        )
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_daily.py-
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_daily.py-        # Parse it
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_daily.py-        self.parse(section)
./submodules/mvt/src/mvt/android/modules/androidqf/dumpsys_battery_daily.py:        self.log.info("Extracted a total of %d battery daily stats", len(self.results))
--
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-class DumpsysPackagesArtifact(AndroidArtifact):
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-    def check_indicators(self) -> None:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-        for result in self.results:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-            if result["package_name"] in ROOT_PACKAGES:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py:                self.log.warning(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-                    'Found an installed package related to rooting/jailbreaking: "%s"',
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-                    result["package_name"],
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-                )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-                self.detected.append(result)
./submodules/mvt/src/mvt/android/artifacts/dumpsys_packages.py-                continue
--
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        if not self.results:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-            return
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        for entry in self.results:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-            for user_key in entry.get("user_keys", []):
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py:                self.log.debug(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-                    f"Found trusted ADB key for user '{user_key['user']}' with fingerprint "
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-                    f"'{user_key['fingerprint']}'"
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-                )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-    def parse(self, content: bytes) -> None:
--
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        Adds results to self.results (List[Dict[str, str]])
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        :param content: content of the ADB section (string)
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        """
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        if not content or b"Can't find service: adb" in content:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py:            self.log.error(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-                "Could not load ADB data from dumpsys. "
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-                "It may not be supported on this device."
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-            )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-            return
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-
--
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        end_of_json = content.rfind(b"}\n") - 2
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        json_content = content[start_of_json:end_of_json].rstrip()
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        parsed = self.indented_dump_parser(json_content)
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        if parsed.get("debugging_manager") is None:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py:            self.log.error("Unable to find expected ADB entries in dumpsys output")  # noqa
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-            return
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        else:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-            parsed = parsed["debugging_manager"]
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_adb.py-        # Calculate key fingerprints for better readability
--
./submodules/mvt/src/mvt/android/artifacts/getprop.py-            self.results.append(entry)
./submodules/mvt/src/mvt/android/artifacts/getprop.py-
./submodules/mvt/src/mvt/android/artifacts/getprop.py-    def check_indicators(self) -> None:
./submodules/mvt/src/mvt/android/artifacts/getprop.py-        for entry in self.results:
./submodules/mvt/src/mvt/android/artifacts/getprop.py-            if entry["name"] in INTERESTING_PROPERTIES:
./submodules/mvt/src/mvt/android/artifacts/getprop.py:                self.log.info("%s: %s", entry["name"], entry["value"])
./submodules/mvt/src/mvt/android/artifacts/getprop.py-
./submodules/mvt/src/mvt/android/artifacts/getprop.py-            if entry["name"] == "ro.build.version.security_patch":
./submodules/mvt/src/mvt/android/artifacts/getprop.py-                warn_android_patch_level(entry["value"], self.log)
./submodules/mvt/src/mvt/android/artifacts/getprop.py-
./submodules/mvt/src/mvt/android/artifacts/getprop.py-        if not self.indicators:
--
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-    def check_indicators(self) -> None:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-        for intent, receivers in self.results.items():
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-            for receiver in receivers:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                if intent == INTENT_NEW_OUTGOING_SMS:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py:                    self.log.info(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        'Found a receiver to intercept outgoing SMS messages: "%s"',
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        receiver["receiver"],
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                    )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                elif intent == INTENT_SMS_RECEIVED:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py:                    self.log.info(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        'Found a receiver to intercept incoming SMS messages: "%s"',
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        receiver["receiver"],
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                    )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                elif intent == INTENT_DATA_SMS_RECEIVED:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py:                    self.log.info(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        'Found a receiver to intercept incoming data SMS message: "%s"',
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        receiver["receiver"],
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                    )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                elif intent == INTENT_PHONE_STATE:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py:                    self.log.info(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        "Found a receiver monitoring "
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        'telephony state/incoming calls: "%s"',
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        receiver["receiver"],
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                    )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                elif intent == INTENT_NEW_OUTGOING_CALL:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py:                    self.log.info(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        'Found a receiver monitoring outgoing calls: "%s"',
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                        receiver["receiver"],
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                    )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_receivers.py-                if not self.indicators:
--
./submodules/mvt/src/mvt/android/artifacts/settings.py-            for key, value in settings.items():
./submodules/mvt/src/mvt/android/artifacts/settings.py-                for danger in ANDROID_DANGEROUS_SETTINGS:
./submodules/mvt/src/mvt/android/artifacts/settings.py-                    # Check if one of the dangerous settings is using an unsafe
./submodules/mvt/src/mvt/android/artifacts/settings.py-                    # value (different than the one specified).
./submodules/mvt/src/mvt/android/artifacts/settings.py-                    if danger["key"] == key and danger["safe_value"] != value:
./submodules/mvt/src/mvt/android/artifacts/settings.py:                        self.log.warning(
./submodules/mvt/src/mvt/android/artifacts/settings.py-                            'Found suspicious "%s" setting "%s = %s" (%s)',
./submodules/mvt/src/mvt/android/artifacts/settings.py-                            namespace,
./submodules/mvt/src/mvt/android/artifacts/settings.py-                            key,
./submodules/mvt/src/mvt/android/artifacts/settings.py-                            value,
./submodules/mvt/src/mvt/android/artifacts/settings.py-                            danger["description"],
--
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-            for perm in result["permissions"]:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                if (
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                    perm["name"] == "REQUEST_INSTALL_PACKAGES"
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                    and perm["access"] == "allow"
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                ):
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py:                    self.log.info(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                        "Package %s with REQUEST_INSTALL_PACKAGES permission",
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                        result["package_name"],
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                    )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-    def parse(self, output: str) -> None:
--
./submodules/mvt/src/mvt/android/utils.py-
./submodules/mvt/src/mvt/android/utils.py-def warn_android_patch_level(patch_level: str, log) -> bool:
./submodules/mvt/src/mvt/android/utils.py-    """Alert if Android patch level out-of-date"""
./submodules/mvt/src/mvt/android/utils.py-    patch_date = datetime.strptime(patch_level, "%Y-%m-%d")
./submodules/mvt/src/mvt/android/utils.py-    if (datetime.now() - patch_date) > timedelta(days=6 * 31):
./submodules/mvt/src/mvt/android/utils.py:        log.warning(
./submodules/mvt/src/mvt/android/utils.py-            "This phone has not received security updates "
./submodules/mvt/src/mvt/android/utils.py-            "for more than six months (last update: %s)",
./submodules/mvt/src/mvt/android/utils.py-            patch_level,
./submodules/mvt/src/mvt/android/utils.py-        )
./submodules/mvt/src/mvt/android/utils.py-        return True
--
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        :param package_name: Name of the package to download
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        :param remote_path: Path to the file to download
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        :returns: Path to the local copy
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        """
./submodules/mvt/src/mvt/android/cmd_download_apks.py:        log.info("Downloading %s ...", remote_path)
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        file_name = ""
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        if "==/" in remote_path:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            file_name = "_" + remote_path.split("==/")[1].replace(".apk", "")
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
--
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            )
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        try:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            self._adb_download(remote_path, local_path)
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        except InsufficientPrivileges:
./submodules/mvt/src/mvt/android/cmd_download_apks.py:            log.error(
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                "Unable to pull package file from %s: insufficient privileges, "
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                "it might be a system app",
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                remote_path,
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            )
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            self._adb_reconnect()
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            return None
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        except Exception as exc:
./submodules/mvt/src/mvt/android/cmd_download_apks.py:            log.exception("Failed to pull package file from %s: %s", remote_path, exc)
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            self._adb_reconnect()
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            return None
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        return local_path
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-    def get_packages(self) -> None:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        """Use the Packages adb module to retrieve the list of packages.
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        We reuse the same extraction logic to then download the APKs.
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        """
./submodules/mvt/src/mvt/android/cmd_download_apks.py:        self.log.info("Retrieving list of installed packages...")
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        m = Packages()
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        m.log = self.log
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        m.serial = self.serial
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        m.run()
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        self.packages = m.results
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-    def pull_packages(self) -> None:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        """Download all files of all selected packages from the device."""
./submodules/mvt/src/mvt/android/cmd_download_apks.py:        log.info(
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            "Starting extraction of installed APKs at folder %s", self.results_path
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        )
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        # If the user provided the flag --all-apks we select all packages.
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        packages_selection = []
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        if self.all_apks:
./submodules/mvt/src/mvt/android/cmd_download_apks.py:            log.info("Selected all %d available packages", len(self.packages))
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            packages_selection = self.packages
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        else:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            # Otherwise we loop through the packages and get only those that
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            # are not marked as system.
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            for package in self.packages:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                if not package.get("system", False):
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                    packages_selection.append(package)
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py:            log.info(
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                'Selected only %d packages which are not marked as "system"',
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                len(packages_selection),
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            )
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        if len(packages_selection) == 0:
./submodules/mvt/src/mvt/android/cmd_download_apks.py:            log.info("No packages were selected for download")
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            return
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py:        log.info("Downloading packages from device. This might take some time ...")
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        self.results_path_apks = os.path.join(self.results_path, "apks")
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        if not os.path.exists(self.results_path_apks):
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            os.makedirs(self.results_path_apks, exist_ok=True)
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
--
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            range(len(packages_selection)),
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            description=f"Downloading {len(packages_selection)} packages...",
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        ):
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            package = packages_selection[i]
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py:            log.info(
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                "[%d/%d] Package: %s",
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                i,
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                len(packages_selection),
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                package["package_name"],
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            )
--
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                if not local_path:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                    continue
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                package_file["local_path"] = local_path
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py:        log.info("Download of selected packages completed")
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-    def save_json(self) -> None:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        json_path = os.path.join(self.results_path, "apks.json")
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        with open(json_path, "w", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            json.dump(self.packages, handle, indent=4)
--
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            with open(self.target_path, "rb") as handle:
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                data = handle.read()
./submodules/mvt/src/mvt/android/cmd_check_backup.py-
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            header = parse_ab_header(data)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            if not header["backup"]:
./submodules/mvt/src/mvt/android/cmd_check_backup.py:                log.critical("Invalid backup format, file should be in .ab format")
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                sys.exit(1)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            password = None
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            if header["encryption"] != "none":
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                password = prompt_or_load_android_backup_password(
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                    log, self.module_options
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                )
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                if not password:
./submodules/mvt/src/mvt/android/cmd_check_backup.py:                    log.critical("No backup password provided.")
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                    sys.exit(1)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            try:
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                tardata = parse_backup_file(data, password=password)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            except InvalidBackupPassword:
./submodules/mvt/src/mvt/android/cmd_check_backup.py:                log.critical("Invalid backup password")
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                sys.exit(1)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            except AndroidBackupParsingError as exc:
./submodules/mvt/src/mvt/android/cmd_check_backup.py:                log.critical("Impossible to parse this backup file: %s", exc)
./submodules/mvt/src/mvt/android/cmd_check_backup.py:                log.critical("Please use Android Backup Extractor (ABE) instead")
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                sys.exit(1)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            dbytes = io.BytesIO(tardata)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            self.backup_archive = tarfile.open(fileobj=dbytes)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            for member in self.backup_archive:
--
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                for fname in subfiles:
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                    self.backup_files.append(
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                        os.path.relpath(os.path.join(root, fname), self.target_path)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                    )
./submodules/mvt/src/mvt/android/cmd_check_backup.py-        else:
./submodules/mvt/src/mvt/android/cmd_check_backup.py:            log.critical(
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                "Invalid backup path, path should be a folder or an "
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                "Android Backup (.ab) file"
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            )
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            sys.exit(1)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-
--
./submodules/mvt/src/mvt/android/cli.py-            download = DownloadAPKs.from_json(from_file)
./submodules/mvt/src/mvt/android/cli.py-        else:
./submodules/mvt/src/mvt/android/cli.py-            # TODO: Do we actually want to be able to run without storing any
./submodules/mvt/src/mvt/android/cli.py-            #       file?
./submodules/mvt/src/mvt/android/cli.py-            if not output:
./submodules/mvt/src/mvt/android/cli.py:                log.critical("You need to specify an output folder with --output!")
./submodules/mvt/src/mvt/android/cli.py-                ctx.exit(1)
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-            download = DownloadAPKs(results_path=output, all_apks=all_apks)
./submodules/mvt/src/mvt/android/cli.py-            if serial:
./submodules/mvt/src/mvt/android/cli.py-                download.serial = serial
--
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    if list_modules:
./submodules/mvt/src/mvt/android/cli.py-        cmd.list_modules()
./submodules/mvt/src/mvt/android/cli.py-        return
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py:    log.info("Checking Android device over debug bridge")
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    cmd.run()
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    if cmd.detected_count > 0:
./submodules/mvt/src/mvt/android/cli.py:        log.warning(
./submodules/mvt/src/mvt/android/cli.py-            "The analysis of the Android device produced %d detections!",
./submodules/mvt/src/mvt/android/cli.py-            cmd.detected_count,
./submodules/mvt/src/mvt/android/cli.py-        )
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-
--
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    if list_modules:
./submodules/mvt/src/mvt/android/cli.py-        cmd.list_modules()
./submodules/mvt/src/mvt/android/cli.py-        return
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py:    log.info("Checking Android bug report at path: %s", bugreport_path)
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    cmd.run()
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    if cmd.detected_count > 0:
./submodules/mvt/src/mvt/android/cli.py:        log.warning(
./submodules/mvt/src/mvt/android/cli.py-            "The analysis of the Android bug report produced %d detections!",
./submodules/mvt/src/mvt/android/cli.py-            cmd.detected_count,
./submodules/mvt/src/mvt/android/cli.py-        )
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-
--
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    if list_modules:
./submodules/mvt/src/mvt/android/cli.py-        cmd.list_modules()
./submodules/mvt/src/mvt/android/cli.py-        return
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py:    log.info("Checking Android backup at path: %s", backup_path)
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    cmd.run()
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    if cmd.detected_count > 0:
./submodules/mvt/src/mvt/android/cli.py:        log.warning(
./submodules/mvt/src/mvt/android/cli.py-            "The analysis of the Android backup produced %d detections!",
./submodules/mvt/src/mvt/android/cli.py-            cmd.detected_count,
./submodules/mvt/src/mvt/android/cli.py-        )
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-
--
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    if list_modules:
./submodules/mvt/src/mvt/android/cli.py-        cmd.list_modules()
./submodules/mvt/src/mvt/android/cli.py-        return
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py:    log.info("Checking AndroidQF acquisition at path: %s", androidqf_path)
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    cmd.run()
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-    if cmd.detected_count > 0:
./submodules/mvt/src/mvt/android/cli.py:        log.warning(
./submodules/mvt/src/mvt/android/cli.py-            "The analysis of the AndroidQF acquisition produced %d detections!",
./submodules/mvt/src/mvt/android/cli.py-            cmd.detected_count,
./submodules/mvt/src/mvt/android/cli.py-        )
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/common/updates.py-        url = self.github_raw_url.format(
./submodules/mvt/src/mvt/common/updates.py-            self.index_owner, self.index_repo, self.index_branch, self.index_path
./submodules/mvt/src/mvt/common/updates.py-        )
./submodules/mvt/src/mvt/common/updates.py-        res = requests.get(url, timeout=15)
./submodules/mvt/src/mvt/common/updates.py-        if res.status_code != 200:
./submodules/mvt/src/mvt/common/updates.py:            log.error(
./submodules/mvt/src/mvt/common/updates.py-                "Failed to retrieve indicators index located at %s (error %d)",
./submodules/mvt/src/mvt/common/updates.py-                url,
./submodules/mvt/src/mvt/common/updates.py-                res.status_code,
./submodules/mvt/src/mvt/common/updates.py-            )
./submodules/mvt/src/mvt/common/updates.py-            return None
--
./submodules/mvt/src/mvt/common/updates.py-        return yaml.safe_load(res.content)
./submodules/mvt/src/mvt/common/updates.py-
./submodules/mvt/src/mvt/common/updates.py-    def download_remote_ioc(self, ioc_url: str) -> Optional[str]:
./submodules/mvt/src/mvt/common/updates.py-        res = requests.get(ioc_url, timeout=15)
./submodules/mvt/src/mvt/common/updates.py-        if res.status_code != 200:
./submodules/mvt/src/mvt/common/updates.py:            log.error(
./submodules/mvt/src/mvt/common/updates.py-                "Failed to download indicators file from %s (error %d)",
./submodules/mvt/src/mvt/common/updates.py-                ioc_url,
./submodules/mvt/src/mvt/common/updates.py-                res.status_code,
./submodules/mvt/src/mvt/common/updates.py-            )
./submodules/mvt/src/mvt/common/updates.py-            return None
--
./submodules/mvt/src/mvt/common/updates.py-                ioc_url = self.github_raw_url.format(owner, repo, branch, path)
./submodules/mvt/src/mvt/common/updates.py-            else:
./submodules/mvt/src/mvt/common/updates.py-                ioc_url = ioc.get("download_url", "")
./submodules/mvt/src/mvt/common/updates.py-
./submodules/mvt/src/mvt/common/updates.py-            if not ioc_url:
./submodules/mvt/src/mvt/common/updates.py:                log.error(
./submodules/mvt/src/mvt/common/updates.py-                    "Could not find a way to download indicator file for %s",
./submodules/mvt/src/mvt/common/updates.py-                    ioc.get("name"),
./submodules/mvt/src/mvt/common/updates.py-                )
./submodules/mvt/src/mvt/common/updates.py-                continue
./submodules/mvt/src/mvt/common/updates.py-
./submodules/mvt/src/mvt/common/updates.py-            ioc_local_path = self.download_remote_ioc(ioc_url)
./submodules/mvt/src/mvt/common/updates.py-            if not ioc_local_path:
./submodules/mvt/src/mvt/common/updates.py-                continue
./submodules/mvt/src/mvt/common/updates.py-
./submodules/mvt/src/mvt/common/updates.py:            log.info(
./submodules/mvt/src/mvt/common/updates.py-                'Downloaded indicators "%s" to %s', ioc.get("name"), ioc_local_path
./submodules/mvt/src/mvt/common/updates.py-            )
./submodules/mvt/src/mvt/common/updates.py-
./submodules/mvt/src/mvt/common/updates.py-        self.set_latest_update()
./submodules/mvt/src/mvt/common/updates.py-
--
./submodules/mvt/src/mvt/common/updates.py-        file_commit_url = (
./submodules/mvt/src/mvt/common/updates.py-            f"https://api.github.com/repos/{owner}/{repo}/commits?path={path}"
./submodules/mvt/src/mvt/common/updates.py-        )
./submodules/mvt/src/mvt/common/updates.py-        res = requests.get(file_commit_url, timeout=15)
./submodules/mvt/src/mvt/common/updates.py-        if res.status_code != 200:
./submodules/mvt/src/mvt/common/updates.py:            log.error(
./submodules/mvt/src/mvt/common/updates.py-                "Failed to get details about file %s (error %d)",
./submodules/mvt/src/mvt/common/updates.py-                file_commit_url,
./submodules/mvt/src/mvt/common/updates.py-                res.status_code,
./submodules/mvt/src/mvt/common/updates.py-            )
./submodules/mvt/src/mvt/common/updates.py-            return -1
--
./submodules/mvt/src/mvt/common/updates.py-        latest_commit = details[0]
./submodules/mvt/src/mvt/common/updates.py-        latest_commit_date = (
./submodules/mvt/src/mvt/common/updates.py-            latest_commit.get("commit", {}).get("author", {}).get("date", None)
./submodules/mvt/src/mvt/common/updates.py-        )
./submodules/mvt/src/mvt/common/updates.py-        if not latest_commit_date:
./submodules/mvt/src/mvt/common/updates.py:            log.error(
./submodules/mvt/src/mvt/common/updates.py-                "Failed to retrieve date of latest update to indicators index file"
./submodules/mvt/src/mvt/common/updates.py-            )
./submodules/mvt/src/mvt/common/updates.py-            return -1
./submodules/mvt/src/mvt/common/updates.py-
./submodules/mvt/src/mvt/common/updates.py-        latest_commit_dt = datetime.strptime(latest_commit_date, "%Y-%m-%dT%H:%M:%SZ")
--
./submodules/mvt/src/mvt/common/indicators.py-                for file in glob.glob(
./submodules/mvt/src/mvt/common/indicators.py-                    os.path.join(path, "**", "*.stix2", recursive=True)
./submodules/mvt/src/mvt/common/indicators.py-                ):
./submodules/mvt/src/mvt/common/indicators.py-                    self.parse_stix2(file)
./submodules/mvt/src/mvt/common/indicators.py-            else:
./submodules/mvt/src/mvt/common/indicators.py:                self.log.error(
./submodules/mvt/src/mvt/common/indicators.py-                    "Path specified with env MVT_STIX2 is not a valid path: %s", path
./submodules/mvt/src/mvt/common/indicators.py-                )
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-    def _new_collection(
./submodules/mvt/src/mvt/common/indicators.py-        self,
--
./submodules/mvt/src/mvt/common/indicators.py-                ioc=value,
./submodules/mvt/src/mvt/common/indicators.py-                ioc_coll=collection,
./submodules/mvt/src/mvt/common/indicators.py-                ioc_coll_list=collection["urls"],
./submodules/mvt/src/mvt/common/indicators.py-            )
./submodules/mvt/src/mvt/common/indicators.py-        else:
./submodules/mvt/src/mvt/common/indicators.py:            self.log.debug("Can't add indicator %s, type %s not supported", value, key)
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-    def parse_stix2(self, file_path: str) -> None:
./submodules/mvt/src/mvt/common/indicators.py-        """Extract indicators from a STIX2 file.
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        :param file_path: Path to the STIX2 file to parse
./submodules/mvt/src/mvt/common/indicators.py-        :type file_path: str
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        """
./submodules/mvt/src/mvt/common/indicators.py:        self.log.info("Parsing STIX2 indicators file at path %s", file_path)
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        with open(file_path, "r", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/common/indicators.py-            try:
./submodules/mvt/src/mvt/common/indicators.py-                data = json.load(handle)
./submodules/mvt/src/mvt/common/indicators.py-            except json.decoder.JSONDecodeError:
./submodules/mvt/src/mvt/common/indicators.py:                self.log.critical(
./submodules/mvt/src/mvt/common/indicators.py-                    "Unable to parse STIX2 indicator file. "
./submodules/mvt/src/mvt/common/indicators.py-                    "The file is corrupted or in the wrong format!"
./submodules/mvt/src/mvt/common/indicators.py-                )
./submodules/mvt/src/mvt/common/indicators.py-                return
./submodules/mvt/src/mvt/common/indicators.py-
--
./submodules/mvt/src/mvt/common/indicators.py-            else:
./submodules/mvt/src/mvt/common/indicators.py-                # Adds to the default collection
./submodules/mvt/src/mvt/common/indicators.py-                self._process_indicator(indicator, default_collection)
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for coll in collections:
./submodules/mvt/src/mvt/common/indicators.py:            self.log.debug(
./submodules/mvt/src/mvt/common/indicators.py-                'Extracted %d indicators for collection with name "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                coll["count"],
./submodules/mvt/src/mvt/common/indicators.py-                coll["name"],
./submodules/mvt/src/mvt/common/indicators.py-            )
./submodules/mvt/src/mvt/common/indicators.py-
--
./submodules/mvt/src/mvt/common/indicators.py-        """
./submodules/mvt/src/mvt/common/indicators.py-        for file_path in files:
./submodules/mvt/src/mvt/common/indicators.py-            if os.path.isfile(file_path):
./submodules/mvt/src/mvt/common/indicators.py-                self.parse_stix2(file_path)
./submodules/mvt/src/mvt/common/indicators.py-            else:
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning("No indicators file exists at path %s", file_path)
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        # Load downloaded indicators and any indicators from env variable.
./submodules/mvt/src/mvt/common/indicators.py-        if load_default:
./submodules/mvt/src/mvt/common/indicators.py-            self._load_downloaded_indicators()
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        self._check_stix2_env_variable()
./submodules/mvt/src/mvt/common/indicators.py:        self.log.info("Loaded a total of %d unique indicators", self.total_ioc_count)
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-    def get_iocs(self, ioc_type: str) -> Iterator[Dict[str, Any]]:
./submodules/mvt/src/mvt/common/indicators.py-        for ioc_collection in self.ioc_collections:
./submodules/mvt/src/mvt/common/indicators.py-            for ioc in ioc_collection.get(ioc_type, []):
./submodules/mvt/src/mvt/common/indicators.py-                yield {
--
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        # Check the URL first
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("urls"):
./submodules/mvt/src/mvt/common/indicators.py-            if ioc["value"] == url:
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious URL %s matching indicator "%s" from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    url,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["value"],
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-            if orig_url.check_if_shortened():
./submodules/mvt/src/mvt/common/indicators.py-                # If it is, we try to retrieve the actual URL making an
./submodules/mvt/src/mvt/common/indicators.py-                # HTTP HEAD request.
./submodules/mvt/src/mvt/common/indicators.py-                unshortened = orig_url.unshorten()
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py:                self.log.debug("Found a shortened URL %s -> %s", url, unshortened)
./submodules/mvt/src/mvt/common/indicators.py-                if unshortened is None:
./submodules/mvt/src/mvt/common/indicators.py:                    self.log.warning("Unable to unshorten URL %s", url)
./submodules/mvt/src/mvt/common/indicators.py-                    return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-                # Now we check for any nested URL shorteners.
./submodules/mvt/src/mvt/common/indicators.py-                dest_url = URL(unshortened)
./submodules/mvt/src/mvt/common/indicators.py-                if dest_url.check_if_shortened():
./submodules/mvt/src/mvt/common/indicators.py:                    self.log.debug(
./submodules/mvt/src/mvt/common/indicators.py-                        "Original URL %s appears to shorten another "
./submodules/mvt/src/mvt/common/indicators.py-                        "shortened URL %s ... checking!",
./submodules/mvt/src/mvt/common/indicators.py-                        orig_url.url,
./submodules/mvt/src/mvt/common/indicators.py-                        dest_url.url,
./submodules/mvt/src/mvt/common/indicators.py-                    )
--
./submodules/mvt/src/mvt/common/indicators.py-        except Exception:
./submodules/mvt/src/mvt/common/indicators.py-            # If URL parsing failed, we just try to do a simple substring
./submodules/mvt/src/mvt/common/indicators.py-            # match.
./submodules/mvt/src/mvt/common/indicators.py-            for idx, ioc in domain_matcher.iter(url):
./submodules/mvt/src/mvt/common/indicators.py-                if ioc["value"].lower() in url:
./submodules/mvt/src/mvt/common/indicators.py:                    self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                        "Maybe found a known suspicious domain %s "
./submodules/mvt/src/mvt/common/indicators.py-                        'matching indicator "%s" from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                        url,
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["value"],
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["name"],
--
./submodules/mvt/src/mvt/common/indicators.py-        # indicators.
./submodules/mvt/src/mvt/common/indicators.py-        for idx, ioc in domain_matcher.iter(final_url.domain.lower()):
./submodules/mvt/src/mvt/common/indicators.py-            # First we check the full domain.
./submodules/mvt/src/mvt/common/indicators.py-            if final_url.domain.lower() == ioc["value"]:
./submodules/mvt/src/mvt/common/indicators.py-                if orig_url.is_shortened and orig_url.url != final_url.url:
./submodules/mvt/src/mvt/common/indicators.py:                    self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                        "Found a known suspicious domain %s "
./submodules/mvt/src/mvt/common/indicators.py-                        'shortened as %s matching indicator "%s" from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                        final_url.url,
./submodules/mvt/src/mvt/common/indicators.py-                        orig_url.url,
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["value"],
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                    )
./submodules/mvt/src/mvt/common/indicators.py-                else:
./submodules/mvt/src/mvt/common/indicators.py:                    self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                        "Found a known suspicious domain %s "
./submodules/mvt/src/mvt/common/indicators.py-                        'matching indicator "%s" from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                        final_url.url,
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["value"],
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["name"],
--
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        # Then we just check the top level domain.
./submodules/mvt/src/mvt/common/indicators.py-        for idx, ioc in domain_matcher.iter(final_url.top_level.lower()):
./submodules/mvt/src/mvt/common/indicators.py-            if final_url.top_level.lower() == ioc["value"]:
./submodules/mvt/src/mvt/common/indicators.py-                if orig_url.is_shortened and orig_url.url != final_url.url:
./submodules/mvt/src/mvt/common/indicators.py:                    self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                        "Found a sub-domain with suspicious top "
./submodules/mvt/src/mvt/common/indicators.py-                        "level %s shortened as %s matching "
./submodules/mvt/src/mvt/common/indicators.py-                        'indicator "%s" from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                        final_url.url,
./submodules/mvt/src/mvt/common/indicators.py-                        orig_url.url,
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["value"],
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                    )
./submodules/mvt/src/mvt/common/indicators.py-                else:
./submodules/mvt/src/mvt/common/indicators.py:                    self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                        "Found a sub-domain with a suspicious top "
./submodules/mvt/src/mvt/common/indicators.py-                        'level %s matching indicator "%s" from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                        final_url.url,
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["value"],
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["name"],
--
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        proc_name = os.path.basename(process)
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("processes"):
./submodules/mvt/src/mvt/common/indicators.py-            if proc_name == ioc["value"]:
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious process name "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    process,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
./submodules/mvt/src/mvt/common/indicators.py-                return ioc
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-            if len(proc_name) == 16:
./submodules/mvt/src/mvt/common/indicators.py-                if ioc["value"].startswith(proc_name):
./submodules/mvt/src/mvt/common/indicators.py:                    self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                        "Found a truncated known suspicious "
./submodules/mvt/src/mvt/common/indicators.py-                        'process name "%s" matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                        process,
./submodules/mvt/src/mvt/common/indicators.py-                        ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                    )
--
./submodules/mvt/src/mvt/common/indicators.py-        if not email:
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("emails"):
./submodules/mvt/src/mvt/common/indicators.py-            if email.lower() == ioc["value"].lower():
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious email address "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    email,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-        if not file_name:
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("file_names"):
./submodules/mvt/src/mvt/common/indicators.py-            if ioc["value"] == file_name:
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious file name "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    file_name,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("file_paths"):
./submodules/mvt/src/mvt/common/indicators.py-            # Strip any trailing slash from indicator paths to match
./submodules/mvt/src/mvt/common/indicators.py-            # directories.
./submodules/mvt/src/mvt/common/indicators.py-            if file_path.startswith(ioc["value"].rstrip("/")):
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious file path "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators form "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    file_path,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("processes"):
./submodules/mvt/src/mvt/common/indicators.py-            parts = file_path.split("/")
./submodules/mvt/src/mvt/common/indicators.py-            if ioc["value"] in parts:
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    "Found known suspicious process name mentioned in file at "
./submodules/mvt/src/mvt/common/indicators.py-                    'path "%s" matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    file_path,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-        if not profile_uuid:
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("ios_profile_ids"):
./submodules/mvt/src/mvt/common/indicators.py-            if profile_uuid in ioc["value"]:
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious profile ID "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    profile_uuid,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-        else:
./submodules/mvt/src/mvt/common/indicators.py-            hash_type = "sha256"
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("files_" + hash_type):
./submodules/mvt/src/mvt/common/indicators.py-            if file_hash.lower() == ioc["value"].lower():
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious file with hash "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    file_hash,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-        if not cert_hash:
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("app_cert_hashes"):
./submodules/mvt/src/mvt/common/indicators.py-            if cert_hash.lower() == ioc["value"].lower():
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious app certfificate with hash "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    cert_hash,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-        if not app_id:
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("app_ids"):
./submodules/mvt/src/mvt/common/indicators.py-            if app_id.lower() == ioc["value"].lower():
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious app with ID "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    app_id,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/indicators.py-        if property_name is None:
./submodules/mvt/src/mvt/common/indicators.py-            return None
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        for ioc in self.get_iocs("android_property_names"):
./submodules/mvt/src/mvt/common/indicators.py-            if property_name.lower() == ioc["value"].lower():
./submodules/mvt/src/mvt/common/indicators.py:                self.log.warning(
./submodules/mvt/src/mvt/common/indicators.py-                    'Found a known suspicious Android property "%s" '
./submodules/mvt/src/mvt/common/indicators.py-                    'matching indicators from "%s"',
./submodules/mvt/src/mvt/common/indicators.py-                    property_name,
./submodules/mvt/src/mvt/common/indicators.py-                    ioc["name"],
./submodules/mvt/src/mvt/common/indicators.py-                )
--
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-        all_modules = []
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-        for entry in self.modules:
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-            if entry not in all_modules:
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                all_modules.append(entry)
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-
./submodules/mvt/src/mvt/common/cmd_check_iocs.py:        log.info("Checking stored results against provided indicators...")
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-        total_detections = 0
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-        for file_name in os.listdir(self.target_path):
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-            name_only, _ = os.path.splitext(file_name)
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-            file_path = os.path.join(self.target_path, file_name)
--
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    continue
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                if iocs_module.get_slug() != name_only:
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    continue
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-
./submodules/mvt/src/mvt/common/cmd_check_iocs.py:                log.info(
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    'Loading results from "%s" with module %s',
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    file_name,
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    iocs_module.__name__,
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                )
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-
--
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    continue
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                else:
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    total_detections += len(m.detected)
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-        if total_detections > 0:
./submodules/mvt/src/mvt/common/cmd_check_iocs.py:            log.warning(
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                "The check of the results produced %d detections!", total_detections
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-            )
--
./submodules/mvt/src/mvt/common/utils.py-            for file in files:
./submodules/mvt/src/mvt/common/utils.py-                file_path = os.path.join(root, file)
./submodules/mvt/src/mvt/common/utils.py-                try:
./submodules/mvt/src/mvt/common/utils.py-                    sha256 = get_sha256_from_file_path(file_path)
./submodules/mvt/src/mvt/common/utils.py-                except FileNotFoundError:
./submodules/mvt/src/mvt/common/utils.py:                    log.error(
./submodules/mvt/src/mvt/common/utils.py-                        "Failed to hash the file %s: might be a symlink", file_path
./submodules/mvt/src/mvt/common/utils.py-                    )
./submodules/mvt/src/mvt/common/utils.py-                    continue
./submodules/mvt/src/mvt/common/utils.py-                except PermissionError:
./submodules/mvt/src/mvt/common/utils.py:                    log.error(
./submodules/mvt/src/mvt/common/utils.py-                        "Failed to hash the file %s: permission denied", file_path
./submodules/mvt/src/mvt/common/utils.py-                    )
./submodules/mvt/src/mvt/common/utils.py-                    continue
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-                yield {"file_path": file_path, "sha256": sha256}
--
./submodules/mvt/src/mvt/common/utils.py-    """
./submodules/mvt/src/mvt/common/utils.py-    Initialise logging for the MVT module
./submodules/mvt/src/mvt/common/utils.py-    """
./submodules/mvt/src/mvt/common/utils.py-    # Setup logging using Rich.
./submodules/mvt/src/mvt/common/utils.py-    log = logging.getLogger("mvt")
./submodules/mvt/src/mvt/common/utils.py:    log.setLevel(logging.DEBUG)
./submodules/mvt/src/mvt/common/utils.py-    consoleHandler = RichHandler(show_path=False, log_time_format="%X")
./submodules/mvt/src/mvt/common/utils.py-    consoleHandler.setFormatter(logging.Formatter("[%(name)s] %(message)s"))
./submodules/mvt/src/mvt/common/utils.py-    if verbose:
./submodules/mvt/src/mvt/common/utils.py-        consoleHandler.setLevel(logging.DEBUG)
./submodules/mvt/src/mvt/common/utils.py-    else:
./submodules/mvt/src/mvt/common/utils.py-        consoleHandler.setLevel(logging.INFO)
./submodules/mvt/src/mvt/common/utils.py:    log.addHandler(consoleHandler)
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-def set_verbose_logging(verbose: bool = False):
./submodules/mvt/src/mvt/common/utils.py-    log = logging.getLogger("mvt")
./submodules/mvt/src/mvt/common/utils.py:    handler = log.handlers[0]
./submodules/mvt/src/mvt/common/utils.py-    if verbose:
./submodules/mvt/src/mvt/common/utils.py-        handler.setLevel(logging.DEBUG)
./submodules/mvt/src/mvt/common/utils.py-    else:
./submodules/mvt/src/mvt/common/utils.py-        handler.setLevel(logging.INFO)
./submodules/mvt/src/mvt/common/utils.py-
--
./submodules/mvt/src/mvt/common/command.py-    def _create_storage(self) -> None:
./submodules/mvt/src/mvt/common/command.py-        if self.results_path and not os.path.exists(self.results_path):
./submodules/mvt/src/mvt/common/command.py-            try:
./submodules/mvt/src/mvt/common/command.py-                os.makedirs(self.results_path)
./submodules/mvt/src/mvt/common/command.py-            except Exception as exc:
./submodules/mvt/src/mvt/common/command.py:                self.log.critical(
./submodules/mvt/src/mvt/common/command.py-                    "Unable to create output folder %s: %s", self.results_path, exc
./submodules/mvt/src/mvt/common/command.py-                )
./submodules/mvt/src/mvt/common/command.py-                sys.exit(1)
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def _setup_logging(self):
--
./submodules/mvt/src/mvt/common/command.py-        with open(info_path, "w+", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/common/command.py-            json.dump(info, handle, indent=4)
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-        if self.target_path and (os.environ.get("MVT_HASH_FILES") or self.hashes):
./submodules/mvt/src/mvt/common/command.py-            info_hash = get_sha256_from_file_path(info_path)
./submodules/mvt/src/mvt/common/command.py:            self.log.info('Reference hash of the info.json file: "%s"', info_hash)
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def generate_hashes(self) -> None:
./submodules/mvt/src/mvt/common/command.py-        """
./submodules/mvt/src/mvt/common/command.py-        Compute hashes for files in the target_path
./submodules/mvt/src/mvt/common/command.py-        """
--
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-        for file in generate_hashes_from_path(self.target_path, self.log):
./submodules/mvt/src/mvt/common/command.py-            self.hash_values.append(file)
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def list_modules(self) -> None:
./submodules/mvt/src/mvt/common/command.py:        self.log.info("Following is the list of available %s modules:", self.name)
./submodules/mvt/src/mvt/common/command.py-        for module in self.modules:
./submodules/mvt/src/mvt/common/command.py:            self.log.info(" - %s", module.__name__)
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def init(self) -> None:
./submodules/mvt/src/mvt/common/command.py-        raise NotImplementedError
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def module_init(self, module: MVTModule) -> None:
--
./submodules/mvt/src/mvt/common/command.py-        raise NotImplementedError
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def _show_disable_adb_warning(self) -> None:
./submodules/mvt/src/mvt/common/command.py-        """Warn if ADB is enabled"""
./submodules/mvt/src/mvt/common/command.py-        if type(self).__name__ in ["CmdAndroidCheckADB", "CmdAndroidCheckAndroidQF"]:
./submodules/mvt/src/mvt/common/command.py:            self.log.info(
./submodules/mvt/src/mvt/common/command.py-                "Please disable Developer Options and ADB (Android Debug Bridge) on the device once finished with the acquisition. "
./submodules/mvt/src/mvt/common/command.py-                "ADB is a powerful tool which can allow unauthorized access to the device."
./submodules/mvt/src/mvt/common/command.py-            )
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def _show_support_message(self) -> None:
./submodules/mvt/src/mvt/common/command.py-        support_message = "Please seek reputable expert help if you have serious concerns about a possible spyware attack. Such support is available to human rights defenders and civil society through Amnesty International's Security Lab at https://securitylab.amnesty.org/get-help/?c=mvt"
./submodules/mvt/src/mvt/common/command.py-        if self.detected_count == 0:
./submodules/mvt/src/mvt/common/command.py:            self.log.info(
./submodules/mvt/src/mvt/common/command.py-                f"[bold]NOTE:[/bold] Using MVT with public indicators of compromise (IOCs) [bold]WILL NOT[/bold] automatically detect advanced attacks.\n\n{support_message}",
./submodules/mvt/src/mvt/common/command.py-                extra={"markup": True},
./submodules/mvt/src/mvt/common/command.py-            )
./submodules/mvt/src/mvt/common/command.py-        else:
./submodules/mvt/src/mvt/common/command.py:            self.log.warning(
./submodules/mvt/src/mvt/common/command.py-                f"[bold]NOTE: Detected indicators of compromise[/bold]. Only expert review can confirm if the detected indicators are signs of an attack.\n\n{support_message}",
./submodules/mvt/src/mvt/common/command.py-                extra={"markup": True},
./submodules/mvt/src/mvt/common/command.py-            )
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def run(self) -> None:
--
./submodules/mvt/src/mvt/common/virustotal.py-    if res.status_code == 200:
./submodules/mvt/src/mvt/common/virustotal.py-        report = res.json()
./submodules/mvt/src/mvt/common/virustotal.py-        return report["data"]
./submodules/mvt/src/mvt/common/virustotal.py-
./submodules/mvt/src/mvt/common/virustotal.py-    if res.status_code == 404:
./submodules/mvt/src/mvt/common/virustotal.py:        log.info("Could not find results for file with hash %s", file_hash)
./submodules/mvt/src/mvt/common/virustotal.py-    elif res.status_code == 429:
./submodules/mvt/src/mvt/common/virustotal.py-        raise VTQuotaExceeded("You have exceeded the quota for your VirusTotal API key")
./submodules/mvt/src/mvt/common/virustotal.py-    else:
./submodules/mvt/src/mvt/common/virustotal.py-        raise Exception(f"Unexpected response from VirusTotal: {res.status_code}")
./submodules/mvt/src/mvt/common/virustotal.py-
--
./submodules/mvt/src/mvt/common/module.py-    @classmethod
./submodules/mvt/src/mvt/common/module.py-    def from_json(cls, json_path: str, log: logging.Logger):
./submodules/mvt/src/mvt/common/module.py-        with open(json_path, "r", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/common/module.py-            results = json.load(handle)
./submodules/mvt/src/mvt/common/module.py-            if log:
./submodules/mvt/src/mvt/common/module.py:                log.info('Loaded %d results from "%s"', len(results), json_path)
./submodules/mvt/src/mvt/common/module.py-            return cls(results=results, log=log)
./submodules/mvt/src/mvt/common/module.py-
./submodules/mvt/src/mvt/common/module.py-    @classmethod
./submodules/mvt/src/mvt/common/module.py-    def get_slug(cls) -> str:
./submodules/mvt/src/mvt/common/module.py-        """Use the module's class name to retrieve a slug"""
--
./submodules/mvt/src/mvt/common/module.py-            results_json_path = os.path.join(self.results_path, results_file_name)
./submodules/mvt/src/mvt/common/module.py-            with open(results_json_path, "w", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/common/module.py-                try:
./submodules/mvt/src/mvt/common/module.py-                    json.dump(self.results, handle, indent=4, cls=CustomJSONEncoder)
./submodules/mvt/src/mvt/common/module.py-                except Exception as exc:
./submodules/mvt/src/mvt/common/module.py:                    self.log.error(
./submodules/mvt/src/mvt/common/module.py-                        "Unable to store results of module %s to file %s: %s",
./submodules/mvt/src/mvt/common/module.py-                        self.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-                        results_file_name,
./submodules/mvt/src/mvt/common/module.py-                        exc,
./submodules/mvt/src/mvt/common/module.py-                    )
--
./submodules/mvt/src/mvt/common/module.py-        """Run the main module procedure."""
./submodules/mvt/src/mvt/common/module.py-        raise NotImplementedError
./submodules/mvt/src/mvt/common/module.py-
./submodules/mvt/src/mvt/common/module.py-
./submodules/mvt/src/mvt/common/module.py-def run_module(module: MVTModule) -> None:
./submodules/mvt/src/mvt/common/module.py:    module.log.info("Running module %s...", module.__class__.__name__)
./submodules/mvt/src/mvt/common/module.py-
./submodules/mvt/src/mvt/common/module.py-    try:
./submodules/mvt/src/mvt/common/module.py-        exec_or_profile("module.run()", globals(), locals())
./submodules/mvt/src/mvt/common/module.py-    except NotImplementedError:
./submodules/mvt/src/mvt/common/module.py:        module.log.exception(
./submodules/mvt/src/mvt/common/module.py-            "The run() procedure of module %s was not implemented yet!",
./submodules/mvt/src/mvt/common/module.py-            module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py-    except InsufficientPrivileges as exc:
./submodules/mvt/src/mvt/common/module.py:        module.log.info(
./submodules/mvt/src/mvt/common/module.py-            "Insufficient privileges for module %s: %s", module.__class__.__name__, exc
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py-    except DatabaseNotFoundError as exc:
./submodules/mvt/src/mvt/common/module.py:        module.log.info(
./submodules/mvt/src/mvt/common/module.py-            "There might be no data to extract by module %s: %s",
./submodules/mvt/src/mvt/common/module.py-            module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-            exc,
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py-    except DatabaseCorruptedError as exc:
./submodules/mvt/src/mvt/common/module.py:        module.log.error(
./submodules/mvt/src/mvt/common/module.py-            "The %s module database seems to be corrupted: %s",
./submodules/mvt/src/mvt/common/module.py-            module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-            exc,
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py-    except Exception as exc:
./submodules/mvt/src/mvt/common/module.py:        module.log.exception(
./submodules/mvt/src/mvt/common/module.py-            "Error in running extraction from module %s: %s",
./submodules/mvt/src/mvt/common/module.py-            module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-            exc,
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py-    else:
./submodules/mvt/src/mvt/common/module.py-        try:
./submodules/mvt/src/mvt/common/module.py-            exec_or_profile("module.check_indicators()", globals(), locals())
./submodules/mvt/src/mvt/common/module.py-        except NotImplementedError:
./submodules/mvt/src/mvt/common/module.py:            module.log.info(
./submodules/mvt/src/mvt/common/module.py-                "The %s module does not support checking for indicators",
./submodules/mvt/src/mvt/common/module.py-                module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-            )
./submodules/mvt/src/mvt/common/module.py-        except Exception as exc:
./submodules/mvt/src/mvt/common/module.py:            module.log.exception(
./submodules/mvt/src/mvt/common/module.py-                "Error when checking indicators from module %s: %s",
./submodules/mvt/src/mvt/common/module.py-                module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-                exc,
./submodules/mvt/src/mvt/common/module.py-            )
./submodules/mvt/src/mvt/common/module.py-
./submodules/mvt/src/mvt/common/module.py-        else:
./submodules/mvt/src/mvt/common/module.py-            if module.indicators and not module.detected:
./submodules/mvt/src/mvt/common/module.py:                module.log.info(
./submodules/mvt/src/mvt/common/module.py-                    "The %s module produced no detections!", module.__class__.__name__
./submodules/mvt/src/mvt/common/module.py-                )
./submodules/mvt/src/mvt/common/module.py-
./submodules/mvt/src/mvt/common/module.py-        try:
./submodules/mvt/src/mvt/common/module.py-            module.to_timeline()
./submodules/mvt/src/mvt/common/module.py-        except NotImplementedError:
./submodules/mvt/src/mvt/common/module.py-            pass
./submodules/mvt/src/mvt/common/module.py-        except Exception as exc:
./submodules/mvt/src/mvt/common/module.py:            module.log.exception(
./submodules/mvt/src/mvt/common/module.py-                "Error when serializing data from module %s: %s",
./submodules/mvt/src/mvt/common/module.py-                module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-                exc,
./submodules/mvt/src/mvt/common/module.py-            )
./submodules/mvt/src/mvt/common/module.py-
--
./submodules/mvt/src/mvt/common/logo.py-        rich_print(
./submodules/mvt/src/mvt/common/logo.py-            "\t\t[bold]Note: Could not check for MVT updates.[/bold] "
./submodules/mvt/src/mvt/common/logo.py-            "You may be working offline. Please update MVT regularly."
./submodules/mvt/src/mvt/common/logo.py-        )
./submodules/mvt/src/mvt/common/logo.py-    except Exception as e:
./submodules/mvt/src/mvt/common/logo.py:        log.error("Error encountered when trying to check latest MVT version: %s", e)
./submodules/mvt/src/mvt/common/logo.py-    else:
./submodules/mvt/src/mvt/common/logo.py-        if latest_version:
./submodules/mvt/src/mvt/common/logo.py-            rich_print(
./submodules/mvt/src/mvt/common/logo.py-                f"\t\t[bold]Version {latest_version} is available! "
./submodules/mvt/src/mvt/common/logo.py-                "Upgrade mvt with `pip3 install -U mvt`[/bold]"
--
./submodules/mvt/src/mvt/common/logo.py-        rich_print(
./submodules/mvt/src/mvt/common/logo.py-            "\t\t[bold]Note: Could not check for indicator updates.[/bold] "
./submodules/mvt/src/mvt/common/logo.py-            "You may be working offline. Please update MVT indicators regularly."
./submodules/mvt/src/mvt/common/logo.py-        )
./submodules/mvt/src/mvt/common/logo.py-    except Exception as e:
./submodules/mvt/src/mvt/common/logo.py:        log.error("Error encountered when trying to check latest MVT indicators: %s", e)
./submodules/mvt/src/mvt/common/logo.py-    else:
./submodules/mvt/src/mvt/common/logo.py-        if ioc_to_update:
./submodules/mvt/src/mvt/common/logo.py-            rich_print(
./submodules/mvt/src/mvt/common/logo.py-                "\t\t[bold]There are updates to your indicators files! "
./submodules/mvt/src/mvt/common/logo.py-                "Run the `download-iocs` command to update![/bold]"
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-        main = self._get_files_by_pattern("main_entry.txt")
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-        if main:
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-            main_content = self._get_file_content(main[0])
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-            try:
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-                return self._get_file_content(main_content.decode().strip())
./submodules/mvt/src/mvt/android/modules/bugreport/base.py:            except KeyError:
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-                return None
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-        else:
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-            dumpstate_logs = self._get_files_by_pattern("dumpState_*.log")
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-            if not dumpstate_logs:
./submodules/mvt/src/mvt/android/modules/bugreport/base.py-                return None
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-from typing import Callable, Optional
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-from adb_shell.adb_device import AdbDeviceTcp, AdbDeviceUsb
./submodules/mvt/src/mvt/android/modules/adb/base.py-from adb_shell.auth.keygen import keygen, write_public_keyfile
./submodules/mvt/src/mvt/android/modules/adb/base.py-from adb_shell.auth.sign_pythonrsa import PythonRSASigner
./submodules/mvt/src/mvt/android/modules/adb/base.py:from adb_shell.exceptions import (
./submodules/mvt/src/mvt/android/modules/adb/base.py-    AdbCommandFailureException,
./submodules/mvt/src/mvt/android/modules/adb/base.py-    DeviceAuthError,
./submodules/mvt/src/mvt/android/modules/adb/base.py-    UsbDeviceNotFoundError,
./submodules/mvt/src/mvt/android/modules/adb/base.py-    UsbReadFailedError,
./submodules/mvt/src/mvt/android/modules/adb/base.py-)
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-        # If no serial was specified or if the serial does not seem to be
./submodules/mvt/src/mvt/android/modules/adb/base.py-        # a HOST:PORT definition, we use the USB transport.
./submodules/mvt/src/mvt/android/modules/adb/base.py-        if not self.serial or ":" not in self.serial:
./submodules/mvt/src/mvt/android/modules/adb/base.py-            try:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.device = AdbDeviceUsb(serial=self.serial)
./submodules/mvt/src/mvt/android/modules/adb/base.py:            except UsbDeviceNotFoundError:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.log.critical(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "No device found. Make sure it is connected and unlocked."
./submodules/mvt/src/mvt/android/modules/adb/base.py-                )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                sys.exit(-1)
./submodules/mvt/src/mvt/android/modules/adb/base.py-        # Otherwise we try to use the TCP transport.
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-            )
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        while True:
./submodules/mvt/src/mvt/android/modules/adb/base.py-            try:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.device.connect(rsa_keys=[signer], auth_timeout_s=5)
./submodules/mvt/src/mvt/android/modules/adb/base.py:            except (USBErrorBusy, USBErrorAccess):
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.log.critical(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "Device is busy, maybe run `adb kill-server` and try again."
./submodules/mvt/src/mvt/android/modules/adb/base.py-                )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                sys.exit(-1)
./submodules/mvt/src/mvt/android/modules/adb/base.py:            except DeviceAuthError:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.log.error(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "You need to authorize this computer on the Android device. "
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "Retrying in 5 seconds..."
./submodules/mvt/src/mvt/android/modules/adb/base.py-                )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                time.sleep(5)
./submodules/mvt/src/mvt/android/modules/adb/base.py:            except UsbReadFailedError:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.log.error(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "Unable to connect to the device over USB. "
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    "Try to unplug, plug the device and start again."
./submodules/mvt/src/mvt/android/modules/adb/base.py-                )
./submodules/mvt/src/mvt/android/modules/adb/base.py-                sys.exit(-1)
./submodules/mvt/src/mvt/android/modules/adb/base.py:            except OSError as exc:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                if exc.errno == 113 and self.serial:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    self.log.critical(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                        "Unable to connect to the device %s: "
./submodules/mvt/src/mvt/android/modules/adb/base.py-                        "did you specify the correct IP address?",
./submodules/mvt/src/mvt/android/modules/adb/base.py-                        self.serial,
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-        :param retry_root: Default value = True)
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        """
./submodules/mvt/src/mvt/android/modules/adb/base.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/base.py-            self.device.pull(remote_path, local_path, progress_callback)
./submodules/mvt/src/mvt/android/modules/adb/base.py:        except AdbCommandFailureException as exc:
./submodules/mvt/src/mvt/android/modules/adb/base.py-            if retry_root:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self._adb_download_root(remote_path, local_path, progress_callback)
./submodules/mvt/src/mvt/android/modules/adb/base.py-            else:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                raise Exception(
./submodules/mvt/src/mvt/android/modules/adb/base.py-                    f"Unable to download file {remote_path}: {exc}"
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-            )
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-            # Delete the copy on /sdcard/.
./submodules/mvt/src/mvt/android/modules/adb/base.py-            self._adb_command(f"rm -rf {new_remote_path}")
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py:        except AdbCommandFailureException as exc:
./submodules/mvt/src/mvt/android/modules/adb/base.py-            raise Exception(f"Unable to download file {remote_path}: {exc}") from exc
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-    def _adb_process_file(self, remote_path: str, process_routine: Callable) -> None:
./submodules/mvt/src/mvt/android/modules/adb/base.py-        """Download a local copy of a file which is only accessible as root.
./submodules/mvt/src/mvt/android/modules/adb/base.py-        This is a wrapper around process_routine.
--
./submodules/mvt/src/mvt/android/modules/adb/base.py-                # Fail as no backup password loaded for this encrypted backup
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.log.critical("No backup password provided.")
./submodules/mvt/src/mvt/android/modules/adb/base.py-            try:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                decrypted_backup_tar = parse_backup_file(backup_output, backup_password)
./submodules/mvt/src/mvt/android/modules/adb/base.py-                return decrypted_backup_tar
./submodules/mvt/src/mvt/android/modules/adb/base.py:            except InvalidBackupPassword:
./submodules/mvt/src/mvt/android/modules/adb/base.py-                self.log.error("You provided the wrong password! Please try again...")
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        self.log.error("All attempts to decrypt backup with password failed!")
./submodules/mvt/src/mvt/android/modules/adb/base.py-
./submodules/mvt/src/mvt/android/modules/adb/base.py-        return None
--
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-            self._adb_process_file(
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-                os.path.join("/", CHROME_HISTORY_PATH), self._parse_db
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-            )
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py:        except Exception as exc:
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-            self.log.error(exc)
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-
./submodules/mvt/src/mvt/android/modules/adb/chrome_history.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        self._adb_connect()
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-            self._adb_process_file(os.path.join("/", WHATSAPP_PATH), self._parse_db)
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py:        except Exception as exc:
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-            self.log.error(exc)
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-
./submodules/mvt/src/mvt/android/modules/adb/whatsapp.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        if not backup_tar:
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            return
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            self.results = parse_tar_for_sms(backup_tar)
./submodules/mvt/src/mvt/android/modules/adb/sms.py:        except AndroidBackupParsingError:
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/sms.py-                "Impossible to read SMS from the Android Backup, "
./submodules/mvt/src/mvt/android/modules/adb/sms.py-                "please extract the SMS and try extracting it with "
./submodules/mvt/src/mvt/android/modules/adb/sms.py-                "Android Backup Extractor"
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            )
--
./submodules/mvt/src/mvt/android/modules/adb/sms.py-                    os.path.join("/", SMS_MMSSMS_PATH), self._parse_db
./submodules/mvt/src/mvt/android/modules/adb/sms.py-                )
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            self._adb_disconnect()
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            return
./submodules/mvt/src/mvt/android/modules/adb/sms.py:        except InsufficientPrivileges:
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            pass
./submodules/mvt/src/mvt/android/modules/adb/sms.py-
./submodules/mvt/src/mvt/android/modules/adb/sms.py-        self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            "No SMS database found. Trying extraction of SMS data "
./submodules/mvt/src/mvt/android/modules/adb/sms.py-            "using Android backup feature."
--
./submodules/mvt/src/mvt/android/modules/adb/settings.py-                    continue
./submodules/mvt/src/mvt/android/modules/adb/settings.py-
./submodules/mvt/src/mvt/android/modules/adb/settings.py-                fields = line.split("=", 1)
./submodules/mvt/src/mvt/android/modules/adb/settings.py-                try:
./submodules/mvt/src/mvt/android/modules/adb/settings.py-                    self.results[namespace][fields[0]] = fields[1]
./submodules/mvt/src/mvt/android/modules/adb/settings.py:                except IndexError:
./submodules/mvt/src/mvt/android/modules/adb/settings.py-                    continue
./submodules/mvt/src/mvt/android/modules/adb/settings.py-
./submodules/mvt/src/mvt/android/modules/adb/settings.py-        self._adb_disconnect()
--
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-        local_file_path = os.path.join(local_files_folder, local_file_name)
./submodules/mvt/src/mvt/android/modules/adb/files.py-
./submodules/mvt/src/mvt/android/modules/adb/files.py-        try:
./submodules/mvt/src/mvt/android/modules/adb/files.py-            self._adb_download(remote_path=file_path, local_path=local_file_path)
./submodules/mvt/src/mvt/android/modules/adb/files.py:        except Exception:
./submodules/mvt/src/mvt/android/modules/adb/files.py-            pass
./submodules/mvt/src/mvt/android/modules/adb/files.py-        else:
./submodules/mvt/src/mvt/android/modules/adb/files.py-            self.log.info(
./submodules/mvt/src/mvt/android/modules/adb/files.py-                "Downloaded file %s to local copy at %s", file_path, local_file_path
./submodules/mvt/src/mvt/android/modules/adb/files.py-            )
--
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-        progress_desc = f"Looking up {total_hashes} files..."
./submodules/mvt/src/mvt/android/modules/adb/packages.py-        for i in track(range(total_hashes), description=progress_desc):
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            try:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                results = virustotal_lookup(hashes[i])
./submodules/mvt/src/mvt/android/modules/adb/packages.py:            except VTNoKey:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                return
./submodules/mvt/src/mvt/android/modules/adb/packages.py:            except VTQuotaExceeded as exc:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                print("Unable to continue: %s", exc)
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                break
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            if not results:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                continue
--
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            fields = line.split()
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            file_name, package_name = fields[0].split(":")[1].rsplit("=", 1)
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            try:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                installer = fields[1].split("=")[1].strip()
./submodules/mvt/src/mvt/android/modules/adb/packages.py:            except IndexError:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                installer = None
./submodules/mvt/src/mvt/android/modules/adb/packages.py-            else:
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                if installer == "null":
./submodules/mvt/src/mvt/android/modules/adb/packages.py-                    installer = None
./submodules/mvt/src/mvt/android/modules/adb/packages.py-
--
./submodules/mvt/src/mvt/android/modules/backup/base.py-
./submodules/mvt/src/mvt/android/modules/backup/base.py-    def _get_file_content(self, file_path: str) -> bytes:
./submodules/mvt/src/mvt/android/modules/backup/base.py-        if self.ab:
./submodules/mvt/src/mvt/android/modules/backup/base.py-            try:
./submodules/mvt/src/mvt/android/modules/backup/base.py-                member = self.tar.getmember(file_path)
./submodules/mvt/src/mvt/android/modules/backup/base.py:            except KeyError:
./submodules/mvt/src/mvt/android/modules/backup/base.py-                return None
./submodules/mvt/src/mvt/android/modules/backup/base.py-            handle = self.tar.extractfile(member)
./submodules/mvt/src/mvt/android/modules/backup/base.py-        else:
./submodules/mvt/src/mvt/android/modules/backup/base.py-            handle = open(os.path.join(self.backup_path, file_path), "rb")
./submodules/mvt/src/mvt/android/modules/backup/base.py-
--
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                self.log.critical("No backup password provided.")
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        try:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            tardata = parse_backup_file(data, password=password)
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:        except InvalidBackupPassword:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            self.log.critical("Invalid backup password")
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:        except AndroidBackupParsingError:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            self.log.critical(
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                "Impossible to parse this backup file, please use"
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                " Android Backup Extractor instead"
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            )
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
--
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        if not tardata:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            return
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-        try:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            self.results = parse_tar_for_sms(tardata)
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py:        except AndroidBackupParsingError:
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            self.log.info(
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                "Impossible to read SMS from the Android Backup, "
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                "please extract the SMS and try extracting it with "
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-                "Android Backup Extractor"
./submodules/mvt/src/mvt/android/modules/androidqf/sms.py-            )
--
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-            data = self._get_file_content(setting_file)
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-            for line in data.decode("utf-8").split("\n"):
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                line = line.strip()
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                try:
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                    key, value = line.split("=", 1)
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py:                except ValueError:
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                    continue
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                try:
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                    self.results[namespace][key] = value
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py:                except IndexError:
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-                    continue
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-        self.log.info(
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-            "Identified %d settings", sum([len(val) for val in self.results.values()])
./submodules/mvt/src/mvt/android/modules/androidqf/settings.py-        )
--
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-    def run(self) -> None:
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-        for file in self._get_files_by_pattern("*/files.json"):
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-            rawdata = self._get_file_content(file).decode("utf-8", errors="ignore")
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-            try:
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                data = json.loads(rawdata)
./submodules/mvt/src/mvt/android/modules/androidqf/files.py:            except json.decoder.JSONDecodeError:
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                data = []
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                for line in rawdata.split("\n"):
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                    if line.strip() == "":
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                        continue
./submodules/mvt/src/mvt/android/modules/androidqf/files.py-                    data.append(json.loads(line))
--
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                        datetime.strptime(
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                            line[line.find("]") + 1 : line.find("(")].strip(),
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                            "%Y-%m-%d %H:%M:%S.%f",
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                        )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                    )
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py:                except ValueError:
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                    # Invalid date format
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                    pass
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-            if line.strip() == "":
./submodules/mvt/src/mvt/android/artifacts/dumpsys_appops.py-                break
--
./submodules/mvt/src/mvt/android/parsers/backup.py-        master_key_length = ord(key_blob.read(1))
./submodules/mvt/src/mvt/android/parsers/backup.py-        master_key = key_blob.read(master_key_length)
./submodules/mvt/src/mvt/android/parsers/backup.py-
./submodules/mvt/src/mvt/android/parsers/backup.py-        master_key_checksum_length = ord(key_blob.read(1))
./submodules/mvt/src/mvt/android/parsers/backup.py-        master_key_checksum = key_blob.read(master_key_checksum_length)
./submodules/mvt/src/mvt/android/parsers/backup.py:    except TypeError as exc:
./submodules/mvt/src/mvt/android/parsers/backup.py-        raise InvalidBackupPassword() from exc
./submodules/mvt/src/mvt/android/parsers/backup.py-
./submodules/mvt/src/mvt/android/parsers/backup.py-    # Handle quirky encoding of master key bytes in Android original Java crypto code.
./submodules/mvt/src/mvt/android/parsers/backup.py-    if format_version > 1:
./submodules/mvt/src/mvt/android/parsers/backup.py-        hmac_mk = to_utf8_bytes(master_key)
--
./submodules/mvt/src/mvt/android/parsers/backup.py-        )
./submodules/mvt/src/mvt/android/parsers/backup.py-
./submodules/mvt/src/mvt/android/parsers/backup.py-    if is_compressed:
./submodules/mvt/src/mvt/android/parsers/backup.py-        try:
./submodules/mvt/src/mvt/android/parsers/backup.py-            tar_data = zlib.decompress(tar_data)
./submodules/mvt/src/mvt/android/parsers/backup.py:        except zlib.error as exc:
./submodules/mvt/src/mvt/android/parsers/backup.py-            raise AndroidBackupParsingError(
./submodules/mvt/src/mvt/android/parsers/backup.py-                "Impossible to decompress the backup file"
./submodules/mvt/src/mvt/android/parsers/backup.py-            ) from exc
./submodules/mvt/src/mvt/android/parsers/backup.py-
./submodules/mvt/src/mvt/android/parsers/backup.py-    return tar_data
--
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                self.results_path_apks, f"{package_name}{file_name}_{name_counter}.apk"
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            )
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        try:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            self._adb_download(remote_path, local_path)
./submodules/mvt/src/mvt/android/cmd_download_apks.py:        except InsufficientPrivileges:
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            log.error(
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                "Unable to pull package file from %s: insufficient privileges, "
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                "it might be a system app",
./submodules/mvt/src/mvt/android/cmd_download_apks.py-                remote_path,
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            )
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            self._adb_reconnect()
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            return None
./submodules/mvt/src/mvt/android/cmd_download_apks.py:        except Exception as exc:
./submodules/mvt/src/mvt/android/cmd_download_apks.py:            log.exception("Failed to pull package file from %s: %s", remote_path, exc)
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            self._adb_reconnect()
./submodules/mvt/src/mvt/android/cmd_download_apks.py-            return None
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
./submodules/mvt/src/mvt/android/cmd_download_apks.py-        return local_path
./submodules/mvt/src/mvt/android/cmd_download_apks.py-
--
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                if not password:
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                    log.critical("No backup password provided.")
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                    sys.exit(1)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            try:
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                tardata = parse_backup_file(data, password=password)
./submodules/mvt/src/mvt/android/cmd_check_backup.py:            except InvalidBackupPassword:
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                log.critical("Invalid backup password")
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                sys.exit(1)
./submodules/mvt/src/mvt/android/cmd_check_backup.py:            except AndroidBackupParsingError as exc:
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                log.critical("Impossible to parse this backup file: %s", exc)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                log.critical("Please use Android Backup Extractor (ABE) instead")
./submodules/mvt/src/mvt/android/cmd_check_backup.py-                sys.exit(1)
./submodules/mvt/src/mvt/android/cmd_check_backup.py-
./submodules/mvt/src/mvt/android/cmd_check_backup.py-            dbytes = io.BytesIO(tardata)
--
./submodules/mvt/src/mvt/android/cli.py-                return
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-        if virustotal:
./submodules/mvt/src/mvt/android/cli.py-            m = Packages()
./submodules/mvt/src/mvt/android/cli.py-            m.check_virustotal(packages_to_lookup)
./submodules/mvt/src/mvt/android/cli.py:    except KeyboardInterrupt:
./submodules/mvt/src/mvt/android/cli.py-        print("")
./submodules/mvt/src/mvt/android/cli.py-        ctx.exit(1)
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-
./submodules/mvt/src/mvt/android/cli.py-# ==============================================================================
./submodules/mvt/src/mvt/common/indicators.py-        self.log.info("Parsing STIX2 indicators file at path %s", file_path)
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-        with open(file_path, "r", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/common/indicators.py-            try:
./submodules/mvt/src/mvt/common/indicators.py-                data = json.load(handle)
./submodules/mvt/src/mvt/common/indicators.py:            except json.decoder.JSONDecodeError:
./submodules/mvt/src/mvt/common/indicators.py-                self.log.critical(
./submodules/mvt/src/mvt/common/indicators.py-                    "Unable to parse STIX2 indicator file. "
./submodules/mvt/src/mvt/common/indicators.py-                    "The file is corrupted or in the wrong format!"
./submodules/mvt/src/mvt/common/indicators.py-                )
./submodules/mvt/src/mvt/common/indicators.py-                return
--
./submodules/mvt/src/mvt/common/indicators.py-
./submodules/mvt/src/mvt/common/indicators.py-                final_url = dest_url
./submodules/mvt/src/mvt/common/indicators.py-            else:
./submodules/mvt/src/mvt/common/indicators.py-                # If it's not shortened, we just use the original URL object.
./submodules/mvt/src/mvt/common/indicators.py-                final_url = orig_url
./submodules/mvt/src/mvt/common/indicators.py:        except Exception:
./submodules/mvt/src/mvt/common/indicators.py-            # If URL parsing failed, we just try to do a simple substring
./submodules/mvt/src/mvt/common/indicators.py-            # match.
./submodules/mvt/src/mvt/common/indicators.py-            for idx, ioc in domain_matcher.iter(url):
./submodules/mvt/src/mvt/common/indicators.py-                if ioc["value"].lower() in url:
./submodules/mvt/src/mvt/common/indicators.py-                    self.log.warning(
--
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    m.indicators = self.iocs
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    m.indicators.log = m.log
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                try:
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    exec_or_profile("m.check_indicators()", globals(), locals())
./submodules/mvt/src/mvt/common/cmd_check_iocs.py:                except NotImplementedError:
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    continue
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                else:
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-                    total_detections += len(m.detected)
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-
./submodules/mvt/src/mvt/common/cmd_check_iocs.py-        if total_detections > 0:
--
./submodules/mvt/src/mvt/common/utils.py-class CustomJSONEncoder(json.JSONEncoder):
./submodules/mvt/src/mvt/common/utils.py-    """
./submodules/mvt/src/mvt/common/utils.py-    Custom JSON encoder to handle non-standard types.
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-    Some modules are storing non-UTF-8 bytes in their results dictionaries.
./submodules/mvt/src/mvt/common/utils.py:    This causes exceptions when the results are being encoded as JSON.
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-    Of course this means that when MVT is run via `check-iocs` with existing
./submodules/mvt/src/mvt/common/utils.py-    results, the encoded version will be loaded back into the dictionary.
./submodules/mvt/src/mvt/common/utils.py-    Modules should ensure they encode anything that needs to be compared
./submodules/mvt/src/mvt/common/utils.py-    against an indicator in a JSON-friendly type.
--
./submodules/mvt/src/mvt/common/utils.py-    :rtype: str
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-    """
./submodules/mvt/src/mvt/common/utils.py-    try:
./submodules/mvt/src/mvt/common/utils.py-        return convert_datetime_to_iso(convert_unix_to_utc_datetime(timestamp))
./submodules/mvt/src/mvt/common/utils.py:    except Exception:
./submodules/mvt/src/mvt/common/utils.py-        return ""
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-def convert_mactime_to_datetime(timestamp: Union[int, float], from_2001: bool = True):
./submodules/mvt/src/mvt/common/utils.py-    """Converts Mac Standard Time to a datetime.
--
./submodules/mvt/src/mvt/common/utils.py-        timestamp = timestamp + 978307200
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-    # TODO: This is rather ugly. Happens sometimes with invalid timestamps.
./submodules/mvt/src/mvt/common/utils.py-    try:
./submodules/mvt/src/mvt/common/utils.py-        return convert_unix_to_utc_datetime(timestamp)
./submodules/mvt/src/mvt/common/utils.py:    except Exception:
./submodules/mvt/src/mvt/common/utils.py-        return None
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-def convert_mactime_to_iso(timestamp: int, from_2001: bool = True):
./submodules/mvt/src/mvt/common/utils.py-    """Wraps two conversions from mactime to iso date.
--
./submodules/mvt/src/mvt/common/utils.py-    sha256_hash = hashlib.sha256()
./submodules/mvt/src/mvt/common/utils.py-    try:
./submodules/mvt/src/mvt/common/utils.py-        with open(file_path, "rb") as handle:
./submodules/mvt/src/mvt/common/utils.py-            for byte_block in iter(lambda: handle.read(4096), b""):
./submodules/mvt/src/mvt/common/utils.py-                sha256_hash.update(byte_block)
./submodules/mvt/src/mvt/common/utils.py:    except OSError:
./submodules/mvt/src/mvt/common/utils.py-        return ""
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-    return sha256_hash.hexdigest()
./submodules/mvt/src/mvt/common/utils.py-
./submodules/mvt/src/mvt/common/utils.py-
--
./submodules/mvt/src/mvt/common/utils.py-        for root, _, files in os.walk(path):
./submodules/mvt/src/mvt/common/utils.py-            for file in files:
./submodules/mvt/src/mvt/common/utils.py-                file_path = os.path.join(root, file)
./submodules/mvt/src/mvt/common/utils.py-                try:
./submodules/mvt/src/mvt/common/utils.py-                    sha256 = get_sha256_from_file_path(file_path)
./submodules/mvt/src/mvt/common/utils.py:                except FileNotFoundError:
./submodules/mvt/src/mvt/common/utils.py-                    log.error(
./submodules/mvt/src/mvt/common/utils.py-                        "Failed to hash the file %s: might be a symlink", file_path
./submodules/mvt/src/mvt/common/utils.py-                    )
./submodules/mvt/src/mvt/common/utils.py-                    continue
./submodules/mvt/src/mvt/common/utils.py:                except PermissionError:
./submodules/mvt/src/mvt/common/utils.py-                    log.error(
./submodules/mvt/src/mvt/common/utils.py-                        "Failed to hash the file %s: permission denied", file_path
./submodules/mvt/src/mvt/common/utils.py-                    )
./submodules/mvt/src/mvt/common/utils.py-                    continue
./submodules/mvt/src/mvt/common/utils.py-
--
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def _create_storage(self) -> None:
./submodules/mvt/src/mvt/common/command.py-        if self.results_path and not os.path.exists(self.results_path):
./submodules/mvt/src/mvt/common/command.py-            try:
./submodules/mvt/src/mvt/common/command.py-                os.makedirs(self.results_path)
./submodules/mvt/src/mvt/common/command.py:            except Exception as exc:
./submodules/mvt/src/mvt/common/command.py-                self.log.critical(
./submodules/mvt/src/mvt/common/command.py-                    "Unable to create output folder %s: %s", self.results_path, exc
./submodules/mvt/src/mvt/common/command.py-                )
./submodules/mvt/src/mvt/common/command.py-                sys.exit(1)
./submodules/mvt/src/mvt/common/command.py-
--
./submodules/mvt/src/mvt/common/command.py-            )
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-    def run(self) -> None:
./submodules/mvt/src/mvt/common/command.py-        try:
./submodules/mvt/src/mvt/common/command.py-            self.init()
./submodules/mvt/src/mvt/common/command.py:        except NotImplementedError:
./submodules/mvt/src/mvt/common/command.py-            pass
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-        for module in self.modules:
./submodules/mvt/src/mvt/common/command.py-            if self.module_name and module.__name__ != self.module_name:
./submodules/mvt/src/mvt/common/command.py-                continue
--
./submodules/mvt/src/mvt/common/command.py-            if self.serial:
./submodules/mvt/src/mvt/common/command.py-                m.serial = self.serial
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-            try:
./submodules/mvt/src/mvt/common/command.py-                self.module_init(m)
./submodules/mvt/src/mvt/common/command.py:            except NotImplementedError:
./submodules/mvt/src/mvt/common/command.py-                pass
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-            run_module(m)
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-            self.executed.append(m)
--
./submodules/mvt/src/mvt/common/command.py-            self.timeline.extend(m.timeline)
./submodules/mvt/src/mvt/common/command.py-            self.timeline_detected.extend(m.timeline_detected)
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-        try:
./submodules/mvt/src/mvt/common/command.py-            self.finish()
./submodules/mvt/src/mvt/common/command.py:        except NotImplementedError:
./submodules/mvt/src/mvt/common/command.py-            pass
./submodules/mvt/src/mvt/common/command.py-
./submodules/mvt/src/mvt/common/command.py-        self._store_timeline()
./submodules/mvt/src/mvt/common/command.py-        self._store_info()
./submodules/mvt/src/mvt/common/command.py-
--
./submodules/mvt/src/mvt/common/module.py-            results_file_name = f"{name}.json"
./submodules/mvt/src/mvt/common/module.py-            results_json_path = os.path.join(self.results_path, results_file_name)
./submodules/mvt/src/mvt/common/module.py-            with open(results_json_path, "w", encoding="utf-8") as handle:
./submodules/mvt/src/mvt/common/module.py-                try:
./submodules/mvt/src/mvt/common/module.py-                    json.dump(self.results, handle, indent=4, cls=CustomJSONEncoder)
./submodules/mvt/src/mvt/common/module.py:                except Exception as exc:
./submodules/mvt/src/mvt/common/module.py-                    self.log.error(
./submodules/mvt/src/mvt/common/module.py-                        "Unable to store results of module %s to file %s: %s",
./submodules/mvt/src/mvt/common/module.py-                        self.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-                        results_file_name,
./submodules/mvt/src/mvt/common/module.py-                        exc,
--
./submodules/mvt/src/mvt/common/module.py-def run_module(module: MVTModule) -> None:
./submodules/mvt/src/mvt/common/module.py-    module.log.info("Running module %s...", module.__class__.__name__)
./submodules/mvt/src/mvt/common/module.py-
./submodules/mvt/src/mvt/common/module.py-    try:
./submodules/mvt/src/mvt/common/module.py-        exec_or_profile("module.run()", globals(), locals())
./submodules/mvt/src/mvt/common/module.py:    except NotImplementedError:
./submodules/mvt/src/mvt/common/module.py:        module.log.exception(
./submodules/mvt/src/mvt/common/module.py-            "The run() procedure of module %s was not implemented yet!",
./submodules/mvt/src/mvt/common/module.py-            module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py:    except InsufficientPrivileges as exc:
./submodules/mvt/src/mvt/common/module.py-        module.log.info(
./submodules/mvt/src/mvt/common/module.py-            "Insufficient privileges for module %s: %s", module.__class__.__name__, exc
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py:    except DatabaseNotFoundError as exc:
./submodules/mvt/src/mvt/common/module.py-        module.log.info(
./submodules/mvt/src/mvt/common/module.py-            "There might be no data to extract by module %s: %s",
./submodules/mvt/src/mvt/common/module.py-            module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-            exc,
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py:    except DatabaseCorruptedError as exc:
./submodules/mvt/src/mvt/common/module.py-        module.log.error(
./submodules/mvt/src/mvt/common/module.py-            "The %s module database seems to be corrupted: %s",
./submodules/mvt/src/mvt/common/module.py-            module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-            exc,
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py:    except Exception as exc:
./submodules/mvt/src/mvt/common/module.py:        module.log.exception(
./submodules/mvt/src/mvt/common/module.py-            "Error in running extraction from module %s: %s",
./submodules/mvt/src/mvt/common/module.py-            module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-            exc,
./submodules/mvt/src/mvt/common/module.py-        )
./submodules/mvt/src/mvt/common/module.py-    else:
./submodules/mvt/src/mvt/common/module.py-        try:
./submodules/mvt/src/mvt/common/module.py-            exec_or_profile("module.check_indicators()", globals(), locals())
./submodules/mvt/src/mvt/common/module.py:        except NotImplementedError:
./submodules/mvt/src/mvt/common/module.py-            module.log.info(
./submodules/mvt/src/mvt/common/module.py-                "The %s module does not support checking for indicators",
./submodules/mvt/src/mvt/common/module.py-                module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-            )
./submodules/mvt/src/mvt/common/module.py:        except Exception as exc:
./submodules/mvt/src/mvt/common/module.py:            module.log.exception(
./submodules/mvt/src/mvt/common/module.py-                "Error when checking indicators from module %s: %s",
./submodules/mvt/src/mvt/common/module.py-                module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-                exc,
./submodules/mvt/src/mvt/common/module.py-            )
./submodules/mvt/src/mvt/common/module.py-
--
./submodules/mvt/src/mvt/common/module.py-                    "The %s module produced no detections!", module.__class__.__name__
./submodules/mvt/src/mvt/common/module.py-                )
./submodules/mvt/src/mvt/common/module.py-
./submodules/mvt/src/mvt/common/module.py-        try:
./submodules/mvt/src/mvt/common/module.py-            module.to_timeline()
./submodules/mvt/src/mvt/common/module.py:        except NotImplementedError:
./submodules/mvt/src/mvt/common/module.py-            pass
./submodules/mvt/src/mvt/common/module.py:        except Exception as exc:
./submodules/mvt/src/mvt/common/module.py:            module.log.exception(
./submodules/mvt/src/mvt/common/module.py-                "Error when serializing data from module %s: %s",
./submodules/mvt/src/mvt/common/module.py-                module.__class__.__name__,
./submodules/mvt/src/mvt/common/module.py-                exc,
./submodules/mvt/src/mvt/common/module.py-            )
./submodules/mvt/src/mvt/common/module.py-
--
./submodules/mvt/src/mvt/common/logo.py-    log = logging.getLogger("mvt")
./submodules/mvt/src/mvt/common/logo.py-    # First we check for MVT version updates.
./submodules/mvt/src/mvt/common/logo.py-    try:
./submodules/mvt/src/mvt/common/logo.py-        mvt_updates = MVTUpdates()
./submodules/mvt/src/mvt/common/logo.py-        latest_version = mvt_updates.check()
./submodules/mvt/src/mvt/common/logo.py:    except (requests.exceptions.ConnectionError, requests.exceptions.Timeout):
./submodules/mvt/src/mvt/common/logo.py-        rich_print(
./submodules/mvt/src/mvt/common/logo.py-            "\t\t[bold]Note: Could not check for MVT updates.[/bold] "
./submodules/mvt/src/mvt/common/logo.py-            "You may be working offline. Please update MVT regularly."
./submodules/mvt/src/mvt/common/logo.py-        )
./submodules/mvt/src/mvt/common/logo.py:    except Exception as e:
./submodules/mvt/src/mvt/common/logo.py-        log.error("Error encountered when trying to check latest MVT version: %s", e)
./submodules/mvt/src/mvt/common/logo.py-    else:
./submodules/mvt/src/mvt/common/logo.py-        if latest_version:
./submodules/mvt/src/mvt/common/logo.py-            rich_print(
./submodules/mvt/src/mvt/common/logo.py-                f"\t\t[bold]Version {latest_version} is available! "
--
./submodules/mvt/src/mvt/common/logo.py-        )
./submodules/mvt/src/mvt/common/logo.py-        return
./submodules/mvt/src/mvt/common/logo.py-
./submodules/mvt/src/mvt/common/logo.py-    try:
./submodules/mvt/src/mvt/common/logo.py-        ioc_to_update = ioc_updates.check()
./submodules/mvt/src/mvt/common/logo.py:    except (requests.exceptions.ConnectionError, requests.exceptions.Timeout):
./submodules/mvt/src/mvt/common/logo.py-        rich_print(
./submodules/mvt/src/mvt/common/logo.py-            "\t\t[bold]Note: Could not check for indicator updates.[/bold] "
./submodules/mvt/src/mvt/common/logo.py-            "You may be working offline. Please update MVT indicators regularly."
./submodules/mvt/src/mvt/common/logo.py-        )
./submodules/mvt/src/mvt/common/logo.py:    except Exception as e:
./submodules/mvt/src/mvt/common/logo.py-        log.error("Error encountered when trying to check latest MVT indicators: %s", e)
./submodules/mvt/src/mvt/common/logo.py-    else:
./submodules/mvt/src/mvt/common/logo.py-        if ioc_to_update:
./submodules/mvt/src/mvt/common/logo.py-            rich_print(
./submodules/mvt/src/mvt/common/logo.py-                "\t\t[bold]There are updates to your indicators files! "
